package org.firstinspires.ftc.teamcode.__compiledautoauto;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.ColorRangeSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.NormalizedColorSensor;
import com.qualcomm.robotcore.hardware.Servo;

import org.firstinspires.ftc.teamcode.auxilary.EncodedMotor;
import org.firstinspires.ftc.teamcode.auxilary.ColorSensor;
import org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.Autoauto;
import org.firstinspires.ftc.teamcode.auxilary.dsls.autoauto.runtime.AutoautoRuntime;
import org.firstinspires.ftc.teamcode.managers.*;
import org.junit.Test;
import org.firstinspires.ftc.teamcode.unitTests.dummy.DummyHardwareMap;

@Autonomous
public class {{className}} extends OpMode {
    MovementManager driver;
    ManipulationManager limbs;
    SensorManager sense;
    ImuManager imu;

    AutoautoRuntime runtime;
    public void init() {
        if(this.internalOpModeServices!=null) FeatureManager.logger.setBackend(telemetry.log());
        driver = new MovementManager(hardwareMap.get(DcMotor.class, "fl"),
                hardwareMap.get(DcMotor.class, "fr"),
                hardwareMap.get(DcMotor.class, "bl"),
                hardwareMap.get(DcMotor.class, "br"));
        limbs = new ManipulationManager(
                new CRServo[] {
                        hardwareMap.get(CRServo.class, "shooterArm")
                },
                new String[] {
                        "shooterArm"
                },
                new Servo[] {
                        hardwareMap.get(Servo.class, "wobbleArmRight"),
                        hardwareMap.get(Servo.class, "wobbleArmLeft"),
                        hardwareMap.get(Servo.class, "wobbleGrabRight"),
                        hardwareMap.get(Servo.class, "wobbleGrabLeft")
                },
                new String[] {
                        "wobbleArmRight","wobbleArmLeft" , "wobbleGrabRight","wobbleGrabLeft"

                },
                new DcMotor[] {
                        hardwareMap.get(DcMotor.class, "drum"),
                        hardwareMap.get(DcMotor.class, "intake"),
                        new EncodedMotor(hardwareMap.get(DcMotor.class, "flywheelRight"), 13),
                        new EncodedMotor(hardwareMap.get(DcMotor.class, "flywheelLeft"), 13)
                },
                new String[] {
                        "drum",
                        "intake",
                        "flywheelRight",
                        "flywheelLeft"
                }
        );
        driver.resetEncoders();
        driver.runWithOutEncoders();

         sense = new SensorManager(
                    new ColorSensor[] {
                            new ColorSensor(hardwareMap.get(NormalizedColorSensor.class, "sensorOne")),
                            new ColorSensor(hardwareMap.get(NormalizedColorSensor.class, "sensorFour"))
                    },
                    new String[] {
                            "sensorOne",
                            "sensorFour"
                    }
            );

            imu = new ImuManager(hardwareMap.get(com.qualcomm.hardware.bosch.BNO055IMU.class, "imu"));


        runtime = Autoauto.executeAutoautoProgram("{{javaStringFileSource}}", driver, limbs, sense, imu);
        FeatureManager.logger.log(runtime.program.toString());
    }

    public void loop() {
        runtime.loop();
        FeatureManager.logger.log("Statepath", runtime.program.currentPathName);
        FeatureManager.logger.log("State", runtime.program.currentPath.currentState);
    }

    @Test
    public void runTest() {
        this.hardwareMap = new DummyHardwareMap();
        this.init();
        FeatureManager.logger.log(runtime.program.toString());
        for(int i = 0; i < 10; i++) this.loop();
    }
}
