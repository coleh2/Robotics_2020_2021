#init:
    setServoPosition(wobbleArmLeft, 0.7), setServoPosition(wobbleArmRight, 0.7), next;
    setServoPosition(wobbleGrabLeft, 1), setServoPosition(wobbleGrabRight, -1), next;
    setServoPosition(shooterArm, 0.63), setMotorPower(drum, -0.5), setMotorPower(flywheel, -1.0), after 0.8s next;
    setMotorPower(drum, 0), setMotorPower(flywheel, 0), next;
    goto shooting

#shooting:
    /*drive to sampling*/
    driveRaw(0.4,0.4,-0.4,-0.4), after 1670vticks next/*, log(getTicks())*/;
    driveRaw(0.4,-0.4,0.4,-0.4), after 500ticks next;

    /*setting conditional*/
    let rings = 0, if(isSpecial(sensorOne) > 0) let rings = 1, if(isSpecial(sensorFour) > 0) let rings = 4, log(rings), after 0.5s next;

    /*drive to line*/
    driveRaw(0.4,0.4,-0.4,-0.4), after 900vticks next;

    driveRaw(0.4,-0.4,0.4,-0.4), after 300ticks next;
    let proportional = proportionalPID(getThirdAngleOrientation(), 180, 0.001f), driveRaw(prorpotional, -1*proportional, -1*proportional, proportional), if(getThirdAngleOrientation() == 179) next, after 0.5s next;
    driveRaw(0.0,0.0,0.0,0.0), next;



    /*shooting*/
    setServoPosition(shooterArm, 0.4), after 0.4s next;
    setServoPosition(shooterArm, 0.63), setMotorPower(drum, -0.5), setMotorPower(flywheel, -1.0), after 0.8s next;
    setMotorPower(flywheel, 0.75), after 0.5s next;

    /*shooting*/
    setServoPosition(shooterArm, 0.4), after 0.4s next;
    setServoPosition(shooterArm, 0.63), setMotorPower(drum, -0.5), setMotorPower(flywheel, -1.0), after 0.8s next;
    setMotorPower(flywheel, 0.75), after 0.5s next;

    /*shooting*/
    setServoPosition(shooterArm, 0.4), after 0.4s next;
    setServoPosition(shooterArm, 0.63), setMotorPower(flywheel, 0), next;

    /*goto different threads*/
    if(rings == 0) goto zeroRings, if(rings == 1) goto oneRing, if(rings == 4) goto fourRings

#zeroRings:
    /*drive to correct position*/
    driveRaw(0.4,0.4,-0.4,-0.4), after 1200vticks next;

    driveRaw(-0.4,0.4,-0.4,0.4), after 1300ticks next;

    //release wobble goal
    setServoPosition(wobbleArmLeft, 0), setServoPosition(wobbleArmRight, 0), after 2s next;
    setServoPosition(wobbleGrabLeft, 0), setServoPosition(wobbleGrabRight, 1), after 2s next;
    setServoPosition(wobbleArmLeft, 0), setServoPosition(wobbleArmRight, 0), driveRaw(0.4,-0.4,0.4,-0.4), after 1300ticks next;

    //park on the line
    driveRaw(-0.4,-0.4,0.4,0.4), after 750vticks goto end

#oneRing:
    //drive to correct position
    driveRaw(0.4,0.4,-0.4,-0.4), after 3000vticks next;

    //release wobble goals
    setServoPosition(wobbleArmLeft, 0.055), setServoPosition(wobbleArmRight, 0.055), after 2s next;
    setServoPosition(wobbleGrabLeft, 0.2), setServoPosition(wobbleGrabRight, 0.2), after 2s next;
    setServoPosition(wobbleArmLeft, 0.055), setServoPosition(wobbleArmRight, 0.055), driveRaw(0.4,-0.4,0.4,-0.4), after 1300ticks next;

    //park on the line
    driveRaw(-0.4,-0.4,0.4,0.4), after 2250vticks goto end

#fourRings:
    //drive to correct position
    driveRaw(0.4,0.4,-0.4,-0.4), after 4200vticks next;
    //turn to position
    let proportional = proportionalPID(getThirdAngleOrientation(), 90, 0.004f), driveRaw(proportional, -1*proportional, -1*proportional, proportional), after 2s next;
    driveRaw(-0.4,-0.4,0.4,0.4), after 600vticks next;

    //release wobble goal
    setServoPosition(wobbleArmLeft, 0.055), setServoPosition(wobbleArmRight, 0.055), after 2s next;
    setServoPosition(wobbleGrabLeft, 0.2), setServoPosition(wobbleGrabRight, 0.2), after 2s next;
    setServoPosition(wobbleArmLeft, 0.055), setServoPosition(wobbleArmRight, 0.055), driveRaw(0.4,-0.4,0.4,-0.4), after 1300ticks next;

    //park on the line
    driveRaw(-0.4,-0.4,0.4,0.4), after 1200vticks goto end

#end:
    driveRaw(0.0,0.0,0.0,0.0), setServoPosition(shooterArm, 0.63), setMotorPower(flywheel, 0), setMotorPower(drum, 0)