/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package net.coleh.controlslanguageplugin.parse.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import com.intellij.psi.TokenType;
import net.coleh.controlslanguageplugin.parse.ControlsTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ControlsLexer.flex</tt>
 */
public class ControlsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;
  public static final int IN_STRING = 4;
  public static final int IN_LINE_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15392 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\3\13\1\40\2\13\1\41"+
    "\1\1\1\13\1\42\4\1\1\13\1\43\1\1\1\44\1\22\7\13\1\45\1\24\1\34\1\46\1\35\1"+
    "\47\1\50\1\51\1\45\1\16\1\52\1\46\1\35\1\53\1\54\1\55\1\56\1\57\1\60\1\22"+
    "\1\35\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\35\1\61\1\66\1\67\1\45\1\70\1\71"+
    "\1\72\1\73\1\33\1\74\1\75\1\56\1\1\1\76\1\77\1\35\1\100\1\101\1\102\1\45\1"+
    "\1\1\76\1\77\1\35\1\103\1\101\1\104\1\45\1\105\1\106\1\77\1\13\1\37\1\107"+
    "\1\110\1\45\1\111\1\112\1\113\1\13\1\114\1\115\1\116\1\56\1\117\1\24\2\13"+
    "\1\31\1\120\1\121\2\1\1\122\1\123\1\124\1\125\1\126\1\127\2\1\1\63\1\130\1"+
    "\121\1\131\1\132\1\13\1\133\1\24\1\134\1\132\1\13\1\133\1\135\3\1\4\13\1\121"+
    "\4\13\1\41\2\13\1\136\2\13\1\137\24\13\1\140\1\141\2\13\1\140\2\13\1\142\1"+
    "\143\1\14\3\13\1\143\3\13\1\37\2\1\1\13\1\1\5\13\1\144\1\24\45\13\1\36\1\13"+
    "\1\145\1\31\4\13\1\146\1\147\1\150\1\151\1\13\1\151\1\13\1\152\1\150\1\153"+
    "\5\13\1\154\1\121\1\1\1\155\1\121\5\13\1\26\2\13\1\31\4\13\1\57\1\13\1\120"+
    "\2\42\1\56\1\13\1\41\1\151\2\13\1\42\1\13\2\121\2\1\1\13\1\42\3\13\1\120\1"+
    "\13\1\36\2\121\1\156\1\120\4\1\4\13\1\42\1\121\1\157\1\152\7\13\1\152\3\13"+
    "\1\26\1\100\2\13\1\41\1\147\4\1\1\160\1\13\1\161\17\13\1\162\21\13\1\144\2"+
    "\13\1\144\1\163\1\13\1\41\3\13\1\164\1\165\1\166\1\133\1\165\1\167\1\1\1\170"+
    "\1\171\1\63\1\172\1\1\1\173\1\1\1\133\3\1\2\13\1\63\1\174\1\175\1\176\1\127"+
    "\1\177\1\1\2\13\1\147\62\1\1\56\2\13\1\121\161\1\2\13\1\120\2\13\1\120\10"+
    "\13\1\200\1\152\2\13\1\136\3\13\1\201\1\171\1\13\1\202\4\203\2\13\2\1\1\171"+
    "\35\1\1\204\1\1\1\24\1\205\1\24\4\13\1\206\1\24\4\13\1\137\1\207\1\13\1\41"+
    "\1\24\4\13\1\120\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1\57\4\1\135\13\1\57\2"+
    "\1\10\13\1\133\4\1\2\13\1\41\20\13\1\133\1\13\1\42\1\1\3\13\1\210\7\13\1\16"+
    "\1\1\1\211\1\212\5\13\1\213\1\13\1\120\1\26\3\1\1\211\2\13\1\26\1\1\3\13\1"+
    "\152\4\13\1\57\1\121\1\13\1\214\2\13\1\41\2\13\1\152\1\13\1\133\4\13\1\215"+
    "\1\121\1\13\1\120\3\13\1\202\1\41\1\121\1\13\1\113\4\13\1\32\1\155\1\13\1"+
    "\216\1\217\1\220\1\203\2\13\1\137\1\57\7\13\1\221\1\121\72\13\1\152\1\13\1"+
    "\222\2\13\1\42\20\1\26\13\1\41\6\13\1\121\2\1\1\202\1\223\1\35\1\224\1\225"+
    "\6\13\1\16\1\1\1\226\25\13\1\41\1\1\4\13\1\212\2\13\1\26\2\1\1\42\1\13\1\1"+
    "\1\13\1\227\1\230\2\1\1\134\7\13\1\133\1\1\1\121\1\24\1\231\1\24\1\31\1\56"+
    "\4\13\1\120\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\41\2\1\7\13\1\31\4\1\3"+
    "\13\1\151\7\1\1\236\10\1\1\13\1\133\3\13\2\63\1\1\2\13\1\1\1\13\1\31\2\13"+
    "\1\31\1\13\1\41\2\13\1\237\1\240\2\1\11\13\1\41\1\121\2\13\1\237\1\13\1\42"+
    "\2\13\1\26\3\13\1\152\11\1\23\13\1\202\1\13\1\57\1\26\11\1\1\241\2\13\1\242"+
    "\1\13\1\57\1\13\1\202\1\13\1\120\4\1\1\13\1\243\1\13\1\57\1\13\1\121\4\1\3"+
    "\13\1\244\4\1\1\245\1\246\1\13\1\247\2\1\1\13\1\133\1\13\1\133\2\1\1\132\1"+
    "\13\1\202\1\1\3\13\1\57\1\13\1\57\1\13\1\32\1\13\1\16\6\1\4\13\1\147\3\1\3"+
    "\13\1\32\3\13\1\32\60\1\4\13\1\202\1\1\1\56\1\171\3\13\1\31\1\1\1\13\1\147"+
    "\1\121\3\13\1\134\1\1\2\13\1\250\4\13\1\251\1\252\2\1\1\13\1\22\1\13\1\253"+
    "\4\1\1\254\1\27\1\147\3\13\1\31\1\121\1\34\1\46\1\35\1\61\1\66\1\255\1\256"+
    "\1\151\10\1\4\13\1\31\1\121\2\1\4\13\1\257\1\121\12\1\3\13\1\260\1\63\1\261"+
    "\2\1\4\13\1\262\1\121\2\1\3\13\1\26\1\121\3\1\1\13\1\100\1\42\1\121\26\1\4"+
    "\13\1\121\1\171\34\1\3\13\1\147\20\1\1\35\2\13\1\14\1\63\1\121\1\1\1\212\1"+
    "\13\1\212\1\132\1\202\64\1\71\13\1\121\6\1\6\13\1\120\1\1\14\13\1\152\53\1"+
    "\2\13\1\120\75\1\44\13\1\202\33\1\43\13\1\147\1\13\1\120\1\121\6\1\1\13\1"+
    "\41\1\151\3\13\1\202\1\152\1\121\1\226\1\263\1\13\67\1\4\13\1\151\2\13\1\120"+
    "\1\171\1\13\4\1\1\63\1\1\76\13\1\133\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1"+
    "\31\1\133\1\147\1\264\114\1\1\265\1\266\1\267\1\1\1\270\11\1\1\271\33\1\5"+
    "\13\1\134\3\13\1\150\1\272\1\273\1\274\3\13\1\275\1\276\1\13\1\277\1\300\1"+
    "\77\24\13\1\260\1\13\1\77\1\137\1\13\1\137\1\13\1\134\1\13\1\134\1\120\1\13"+
    "\1\120\1\13\1\35\1\13\1\35\1\13\1\301\3\13\40\1\3\13\1\222\2\13\1\133\1\302"+
    "\1\303\1\157\1\24\25\1\1\14\1\213\1\304\75\1\14\13\1\151\1\202\2\1\4\13\1"+
    "\31\1\121\112\1\1\274\1\13\1\305\1\306\1\307\1\310\1\311\1\312\1\313\1\42"+
    "\1\314\1\42\47\1\1\13\1\121\1\13\1\121\1\13\1\121\47\1\55\13\1\202\2\1\103"+
    "\13\1\151\15\13\1\41\150\13\1\16\25\1\41\13\1\41\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3280 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\1\22\0\1\50\4\0\1\70\1\0\1\57\4\0\1\43\1\2\1\4\1\0\12\3\1\61\1\60"+
    "\5\0\1\22\1\63\1\56\1\30\1\15\1\53\1\45\1\36\1\35\1\5\1\65\1\47\1\27\1\26"+
    "\1\17\1\41\1\67\1\23\1\14\1\16\1\54\1\5\1\34\1\5\1\42\1\5\4\0\1\6\1\0\1\20"+
    "\1\62\1\55\1\7\1\11\1\51\1\44\1\33\1\32\1\5\1\64\1\46\1\25\1\24\1\10\1\37"+
    "\1\66\1\21\1\12\1\13\1\52\1\5\1\31\1\5\1\40\1\5\12\0\1\1\12\0\1\1\11\0\1\6"+
    "\12\0\1\6\4\0\1\6\5\0\27\6\1\0\12\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6\1\0"+
    "\5\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\23\6\1\0"+
    "\11\6\1\0\26\6\2\0\1\6\6\0\10\6\10\0\16\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\1\6"+
    "\10\0\13\6\5\0\3\6\15\0\12\6\4\0\6\6\1\0\10\6\2\0\12\6\1\0\23\6\2\0\14\6\2"+
    "\0\11\6\4\0\1\6\5\0\16\6\2\0\14\6\4\0\5\6\1\0\10\6\6\0\20\6\2\0\13\6\2\0\16"+
    "\6\1\0\1\6\3\0\4\6\2\0\11\6\2\0\2\6\2\0\4\6\10\0\1\6\4\0\2\6\1\0\1\6\1\0\3"+
    "\6\1\0\6\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6"+
    "\3\0\1\6\7\0\4\6\1\0\1\6\7\0\20\6\13\0\3\6\1\0\11\6\1\0\2\6\1\0\2\6\1\0\5"+
    "\6\2\0\12\6\1\0\3\6\1\0\3\6\2\0\1\6\30\0\1\6\7\0\3\6\1\0\10\6\2\0\6\6\2\0"+
    "\2\6\2\0\3\6\10\0\2\6\4\0\2\6\1\0\1\6\1\0\1\6\20\0\2\6\1\0\6\6\3\0\3\6\1\0"+
    "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\5\6\3\0\3\6\1\0\4\6\2\0\1"+
    "\6\6\0\1\6\10\0\4\6\1\0\10\6\1\0\3\6\1\0\30\6\3\0\10\6\1\0\3\6\1\0\4\6\7\0"+
    "\2\6\1\0\3\6\5\0\4\6\1\0\5\6\2\0\4\6\5\0\2\6\7\0\1\6\2\0\2\6\16\0\3\6\1\0"+
    "\10\6\1\0\7\6\1\0\3\6\1\0\5\6\5\0\4\6\7\0\1\6\12\0\6\6\2\0\2\6\1\0\22\6\3"+
    "\0\10\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6\2\0\2\6"+
    "\14\0\17\6\1\0\12\6\7\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7"+
    "\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\15\6\1\0\3\6\2\0\5\6\1\0\1\6\1\0\6"+
    "\6\2\0\12\6\2\0\4\6\10\0\2\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0\12\6\1\0\24\6\3"+
    "\0\5\6\1\0\12\6\6\0\1\6\11\0\6\6\1\0\1\6\5\0\1\6\2\0\13\6\1\0\15\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\16\6"+
    "\2\0\6\6\2\0\1\1\32\6\3\0\13\6\7\0\15\6\1\0\7\6\13\0\4\6\14\0\1\6\1\0\2\6"+
    "\14\0\4\6\3\0\1\6\4\0\2\6\15\0\3\6\11\0\1\6\23\0\10\6\1\0\23\6\1\0\2\6\6\0"+
    "\6\6\5\0\15\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\6\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0"+
    "\7\6\3\0\4\6\2\0\6\6\4\0\13\1\15\0\2\1\5\0\1\1\17\0\1\6\4\0\1\6\12\0\1\1\1"+
    "\0\1\6\15\0\1\6\2\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1"+
    "\0\1\6\1\0\4\6\1\0\1\6\5\0\5\6\4\0\1\6\1\0\5\6\6\0\15\6\7\0\10\6\11\0\7\6"+
    "\1\0\7\6\1\0\1\1\4\0\3\6\11\0\5\6\2\0\5\6\3\0\7\6\2\0\2\6\2\0\3\6\5\0\16\6"+
    "\1\0\12\6\1\0\1\6\7\0\11\6\2\0\27\6\2\0\15\6\3\0\1\6\1\0\1\6\2\0\1\6\16\0"+
    "\1\6\2\0\5\6\12\0\6\6\2\0\6\6\2\0\6\6\11\0\13\6\1\0\2\6\2\0\7\6\4\0\5\6\3"+
    "\0\5\6\5\0\12\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\12\6\3\0\15\6\3\0\2\6"+
    "\30\0\16\6\4\0\1\6\2\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\14\6\1\0\16\6\1\0\2"+
    "\6\1\0\1\6\15\0\1\6\2\0\4\6\4\0\10\6\1\0\5\6\12\0\6\6\2\0\1\6\1\0\14\6\1\0"+
    "\2\6\3\0\1\6\2\0\4\6\1\0\2\6\12\0\10\6\6\0\6\6\1\0\2\6\5\0\10\6\1\0\3\6\1"+
    "\0\13\6\4\0\3\6\4\0\5\6\2\0\1\6\11\0\5\6\5\0\3\6\3\0\13\6\1\0\1\6\3\0\10\6"+
    "\6\0\1\6\1\0\7\6\1\0\1\6\1\0\4\6\1\0\2\6\6\0\1\6\5\0\7\6\2\0\7\6\3\0\6\6\1"+
    "\0\1\6\10\0\6\6\2\0\10\6\10\0\6\6\2\0\1\6\3\0\1\6\13\0\10\6\5\0\15\6\3\0\2"+
    "\6\6\0\5\6\3\0\6\6\10\0\10\6\2\0\7\6\16\0\4\6\4\0\3\6\15\0\1\6\2\0\2\6\2\0"+
    "\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0\21\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\14\6\1"+
    "\0\4\6\1\0\5\6\1\0\1\6\3\0\11\6\1\0\10\6\2\0\2\6\5\0\1\6\16\0\1\6\13\0\2\6"+
    "\1\0\2\6\1\0\5\6\6\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0\1\6\1\0\1\6"+
    "\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6\1"+
    "\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0"+
    "\1\6\1\0\12\6\1\0\5\6\1\0\3\6\1\0\5\6\1\0\5\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\12\1\1\6"+
    "\1\1\1\6\15\1\1\7\7\1\1\10\2\1\1\11"+
    "\1\12\1\0\1\4\3\13\1\14\1\15\3\13\1\16"+
    "\11\13\1\17\1\0\4\13\1\17\1\0\15\13\1\20"+
    "\1\21\1\0\1\22\5\13\1\0\1\22\17\13\1\0"+
    "\6\13\1\23\1\13\1\24\1\13\1\23\3\13\1\24"+
    "\2\13\1\25\1\26\2\0\3\13\2\0\17\13\3\0"+
    "\5\13\3\0\5\13\1\27\2\13\1\27\6\13\1\30"+
    "\1\31\1\32\1\13\1\33\1\13\1\34\1\13\1\35"+
    "\1\0\1\36\2\13\1\0\1\13\2\0\3\13\2\0"+
    "\15\13\1\37\1\40\3\0\1\13\1\41\1\42\1\37"+
    "\1\40\3\0\1\13\1\41\1\42\16\13\1\43\1\0"+
    "\1\13\1\0\1\13\2\0\3\13\2\0\4\13\1\44"+
    "\1\0\1\13\1\45\1\13\1\0\2\13\5\0\1\46"+
    "\2\13\5\0\4\13\1\47\2\0\10\13\4\0\1\13"+
    "\2\0\2\13\1\50\2\0\2\13\1\51\1\0\1\52"+
    "\1\0\1\53\3\0\1\54\1\0\1\13\1\55\4\0"+
    "\3\13\1\56\4\0\5\13\4\0\1\13\2\0\1\13"+
    "\1\57\2\0\1\13\3\0\1\60\2\0\1\61\3\0"+
    "\2\13\4\0\1\62\1\13\1\62\2\13\1\63\2\0"+
    "\1\13\2\0\1\64\4\0\1\65\4\0\1\66\4\0"+
    "\1\67\2\13\1\70\6\0\1\71\1\72\2\0\1\73"+
    "\1\74\2\13\3\0\1\75\3\0\2\13\1\76\4\0"+
    "\1\77\1\100\26\0\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\71\0\162\0\253\0\253\0\344\0\u011d"+
    "\0\u0156\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\71\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804"+
    "\0\u083d\0\71\0\u0876\0\u08af\0\71\0\162\0\344\0\344"+
    "\0\u011d\0\u08e8\0\u0921\0\u011d\0\u011d\0\u095a\0\u0993\0\u09cc"+
    "\0\u011d\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u011d"+
    "\0\u011d\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1"+
    "\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599"+
    "\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761"+
    "\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929"+
    "\0\u1962\0\u199b\0\u19d4\0\u011d\0\u011d\0\u1a0d\0\u1a46\0\u1a7f"+
    "\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47"+
    "\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f"+
    "\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7"+
    "\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f"+
    "\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367"+
    "\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484\0\71\0\u011d\0\u011d"+
    "\0\u24bd\0\u011d\0\u24f6\0\u011d\0\u252f\0\u011d\0\u2568\0\u011d"+
    "\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730"+
    "\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8"+
    "\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0"+
    "\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88"+
    "\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50"+
    "\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018"+
    "\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u011d\0\u31a7"+
    "\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f"+
    "\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c\0\u34c5\0\u011d\0\u34fe"+
    "\0\u3537\0\u011d\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d"+
    "\0\u36c6\0\u36ff\0\u3738\0\u011d\0\u3771\0\u37aa\0\u37e3\0\u381c"+
    "\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u011d"+
    "\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73"+
    "\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b"+
    "\0\u3d74\0\u3dad\0\u3de6\0\u011d\0\u3e1f\0\u3e58\0\u3e91\0\u3eca"+
    "\0\u011d\0\u3f03\0\u011d\0\u3f3c\0\u011d\0\u3f75\0\u3fae\0\u3fe7"+
    "\0\71\0\u4020\0\u4059\0\u011d\0\u4092\0\u40cb\0\u4104\0\u413d"+
    "\0\u4176\0\u41af\0\u41e8\0\u011d\0\u4221\0\u425a\0\u4293\0\u42cc"+
    "\0\u4305\0\u433e\0\u4377\0\u43b0\0\u43e9\0\u4422\0\u445b\0\u4494"+
    "\0\u44cd\0\u4506\0\u453f\0\u4578\0\u45b1\0\u011d\0\u45ea\0\u4623"+
    "\0\u465c\0\u4695\0\u46ce\0\u4707\0\71\0\u4740\0\u4779\0\u011d"+
    "\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u4896\0\u48cf\0\u4908\0\u4941"+
    "\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\u4a5e\0\u4a97\0\71\0\u4ad0"+
    "\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4\0\u011d\0\u4bed\0\u4c26\0\u4c5f"+
    "\0\u4c98\0\71\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c\0\u011d\0\u4db5"+
    "\0\u4dee\0\u4e27\0\u4e60\0\u011d\0\u4e99\0\u4ed2\0\u011d\0\u4f0b"+
    "\0\u4f44\0\u4f7d\0\u4fb6\0\u4fef\0\u5028\0\71\0\71\0\u5061"+
    "\0\u509a\0\71\0\71\0\u50d3\0\u510c\0\u5145\0\u517e\0\u51b7"+
    "\0\71\0\u51f0\0\u5229\0\u5262\0\u529b\0\u52d4\0\71\0\u530d"+
    "\0\u5346\0\u537f\0\u53b8\0\u011d\0\71\0\u53f1\0\u542a\0\u5463"+
    "\0\u549c\0\u54d5\0\u550e\0\u5547\0\u5580\0\u55b9\0\u55f2\0\u562b"+
    "\0\u5664\0\u569d\0\u56d6\0\u570f\0\u5748\0\u5781\0\u57ba\0\u57f3"+
    "\0\u582c\0\u5865\0\u589e\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\10\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\10\1\41\1\10\1\42\2\10\1\43\1\44\1\4"+
    "\1\45\1\10\1\46\1\10\1\47\1\50\1\51\1\3"+
    "\1\52\1\53\1\54\4\10\1\55\72\0\1\56\46\0"+
    "\1\56\23\0\1\6\1\57\67\0\1\60\70\0\1\61"+
    "\1\0\36\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\3\61\1\62\32\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\6\61"+
    "\1\63\5\61\1\64\21\61\1\0\4\61\1\0\1\65"+
    "\5\61\3\0\6\61\4\0\1\61\1\0\36\61\1\0"+
    "\2\61\1\66\1\61\1\0\6\61\3\0\4\61\1\67"+
    "\1\61\4\0\1\61\1\0\4\61\1\70\31\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\3\61\1\71\10\61\1\72\11\61\1\73\7\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\10\61\1\74\25\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\36\61\1\0\3\61\1\75"+
    "\1\0\6\61\3\0\5\61\1\76\4\0\1\61\1\0"+
    "\12\61\1\71\3\61\1\77\12\61\1\100\4\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\11\61\1\101\4\61\1\64\17\61\1\0\4\61\1\0"+
    "\2\61\1\65\3\61\3\0\6\61\4\0\1\61\1\0"+
    "\14\61\1\102\2\61\1\103\16\61\1\0\4\61\1\104"+
    "\4\61\1\105\1\61\3\0\6\61\4\0\1\61\1\0"+
    "\3\61\1\106\1\107\31\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\16\61\1\110\2\61"+
    "\1\111\14\61\1\0\4\61\1\112\5\61\1\113\3\0"+
    "\6\61\4\0\1\61\1\0\10\61\1\114\1\61\1\115"+
    "\23\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\3\61\1\116\7\61\1\117\22\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\3\61\1\120\21\61\1\121\10\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\12\61\1\122"+
    "\2\61\1\123\20\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\12\61\1\124\15\61\1\125"+
    "\5\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\25\61\1\126\1\127\7\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\5\61"+
    "\1\130\1\131\27\61\1\0\4\61\1\132\1\133\5\61"+
    "\3\0\6\61\4\0\1\61\1\0\4\61\1\134\6\61"+
    "\1\135\11\61\1\136\10\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\30\61\1\137\1\140"+
    "\4\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\7\61\1\130\1\61\1\131\24\61\1\0"+
    "\4\61\1\141\2\61\1\142\3\61\3\0\6\61\4\0"+
    "\1\61\1\0\10\61\1\143\4\61\1\144\12\61\1\145"+
    "\5\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\14\61\1\146\21\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\16\61\1\147"+
    "\17\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\3\61\1\150\1\151\31\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\10\61"+
    "\1\152\1\61\1\153\23\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\25\61\1\154\10\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\30\61\1\155\5\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\3\61\1\156\7\61"+
    "\1\157\22\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\12\61\1\160\2\61\1\161\20\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\61\0\1\162"+
    "\13\0\1\61\1\0\36\61\1\0\4\61\1\0\1\61"+
    "\1\163\4\61\3\0\6\61\4\0\1\61\1\0\36\61"+
    "\1\0\4\61\1\0\3\61\1\164\2\61\3\0\6\61"+
    "\4\0\1\61\1\0\4\61\1\165\31\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\26\61"+
    "\1\166\7\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\5\61\1\167\30\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\36\61"+
    "\1\0\4\61\1\0\1\61\1\170\4\61\3\0\6\61"+
    "\4\0\1\61\1\0\6\61\1\171\27\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\36\61"+
    "\1\0\4\61\1\0\1\61\1\172\4\61\3\0\6\61"+
    "\4\0\1\61\1\0\4\61\1\173\6\61\1\174\22\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\11\61\1\175\24\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\7\61\1\176\26\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\36\61\1\0\4\61\1\0\3\61\1\177\2\61"+
    "\3\0\6\61\4\0\1\61\1\0\36\61\1\0\4\61"+
    "\1\0\3\61\1\200\2\61\3\0\6\61\4\0\1\61"+
    "\1\0\10\61\1\201\4\61\1\202\20\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\31\61"+
    "\1\203\4\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\4\61\1\204\31\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\2\61"+
    "\1\205\33\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\10\0\1\206\2\0\1\207\61\0\1\61\1\0\6\61"+
    "\1\210\27\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\36\61\1\0\4\61\1\0\1\61"+
    "\1\211\4\61\3\0\6\61\4\0\1\61\1\0\13\61"+
    "\1\212\22\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\10\61\1\204\25\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\23\61"+
    "\1\205\12\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\15\0\1\213\13\0\1\214\43\0\1\61\1\0\11\61"+
    "\1\215\24\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\15\61\1\216\20\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\36\61"+
    "\1\0\4\61\1\0\3\61\1\217\2\61\3\0\6\61"+
    "\4\0\1\61\1\0\14\61\1\220\21\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\20\61"+
    "\1\221\15\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\14\61\1\222\21\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\20\61"+
    "\1\223\15\61\1\0\1\224\3\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\16\61\1\225\17\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\22\61\1\226\13\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\16\61\1\227\17\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\22\61\1\230\13\61\1\0\1\61\1\231\2\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\6\61\1\232"+
    "\27\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\4\61\1\233\31\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\14\0\1\234\23\0\1\235\34\0"+
    "\1\61\1\0\36\61\1\0\4\61\1\236\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\14\61\1\237\21\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\6\61\1\240\27\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\36\61\1\0\1\241\3\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\11\61"+
    "\1\242\24\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\10\61\1\243\25\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\17\0\1\244\22\0\1\245"+
    "\32\0\1\61\1\0\36\61\1\0\4\61\1\246\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\16\61\1\247\17\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\11\61\1\250\24\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\36\61\1\0\1\61"+
    "\1\251\2\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\25\61\1\252\10\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\30\61\1\253\5\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\24\61\1\254\11\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\5\61\1\255\30\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\7\61\1\256\26\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\27\61\1\257\6\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\14\61\1\260\21\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\16\61\1\261\17\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\17\61\1\262\16\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\36\61\1\0\2\61"+
    "\1\263\1\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\21\61\1\264\14\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\36\61\1\0\3\61"+
    "\1\265\1\0\6\61\3\0\6\61\60\0\1\266\14\0"+
    "\1\61\1\0\6\61\1\267\27\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\11\61\1\267"+
    "\24\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\5\61\1\270\30\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\4\61\1\271"+
    "\31\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\4\61\1\272\31\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\13\61\1\273"+
    "\22\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\5\61\1\274\30\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\36\61\1\0"+
    "\2\61\1\275\1\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\17\61\1\276\16\61\1\0\4\61\1\277"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\6\61\1\300"+
    "\27\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\7\61\1\274\26\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\10\61\1\272"+
    "\25\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\15\61\1\301\20\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\36\61\1\0"+
    "\3\61\1\302\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\21\61\1\276\14\61\1\0\4\61\1\303\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\11\61\1\300\24\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\10\61\1\304\25\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\12\0\1\305\134\0\1\306\16\0\1\61"+
    "\1\0\36\61\1\0\4\61\1\0\1\61\1\307\4\61"+
    "\3\0\6\61\4\0\1\61\1\0\36\61\1\0\1\310"+
    "\3\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\36\61\1\0\2\61\1\311\1\61\1\0\6\61\3\0"+
    "\6\61\57\0\1\312\27\0\1\313\56\0\1\61\1\0"+
    "\36\61\1\0\4\61\1\0\3\61\1\314\2\61\3\0"+
    "\6\61\4\0\1\61\1\0\36\61\1\0\3\61\1\315"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\36\61"+
    "\1\0\1\61\1\316\2\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\20\61\1\317\15\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\4\61"+
    "\1\320\31\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\4\61\1\321\31\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\25\61"+
    "\1\322\10\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\26\61\1\323\7\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\22\61"+
    "\1\324\13\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\10\61\1\325\25\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\10\61"+
    "\1\326\25\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\30\61\1\327\5\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\31\61"+
    "\1\330\4\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\26\61\1\331\7\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\17\61"+
    "\1\332\16\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\34\0\1\333\56\0\1\334\73\0\1\335\47\0\1\61"+
    "\1\0\4\61\1\336\31\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\4\61\1\337\31\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\26\61\1\340\7\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\31\61\1\341\4\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\21\61\1\342\14\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\37\0\1\343\55\0\1\344\73\0\1\345"+
    "\45\0\1\61\1\0\10\61\1\346\25\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\10\61"+
    "\1\347\25\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\31\61\1\350\4\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\3\61"+
    "\1\351\32\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\12\61\1\352\23\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\4\61"+
    "\1\353\31\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\5\61\1\354\30\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\7\61"+
    "\1\355\26\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\10\61\1\356\25\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\5\61"+
    "\1\357\30\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\7\61\1\360\26\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\6\61"+
    "\1\361\27\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\36\61\1\0\4\61\1\0\4\61"+
    "\1\362\1\61\3\0\6\61\4\0\1\61\1\0\11\61"+
    "\1\363\24\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\36\61\1\0\4\61\1\0\5\61"+
    "\1\364\3\0\6\61\4\0\1\61\1\0\14\61\1\365"+
    "\21\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\36\61\1\0\2\61\1\366\1\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\33\61\1\367"+
    "\2\61\1\0\4\61\1\0\6\61\3\0\6\61\13\0"+
    "\1\370\61\0\1\61\1\0\36\61\1\0\3\61\1\371"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\35\61"+
    "\1\367\1\0\4\61\1\0\6\61\3\0\6\61\15\0"+
    "\1\372\57\0\1\61\1\0\16\61\1\373\17\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\52\0\1\374\37\0"+
    "\1\375\53\0\1\61\1\0\13\61\1\376\22\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\26\61\1\377\7\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\36\61\1\0\2\61\1\u0100"+
    "\1\61\1\0\6\61\3\0\6\61\23\0\1\u0101\121\0"+
    "\1\u0102\20\0\1\61\1\0\15\61\1\u0103\20\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\36\61\1\0\3\61\1\u0104\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\31\61\1\u0105\4\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\13\61"+
    "\1\u0106\22\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\2\61\1\u0107\33\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\36\61"+
    "\1\0\4\61\1\u0108\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\36\61\1\0\4\61\1\0\4\61\1\u0109\1\61"+
    "\3\0\6\61\4\0\1\61\1\0\6\61\1\u010a\27\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\15\61\1\u010b\20\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\23\61\1\u0107\12\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\36\61\1\0\4\61\1\u010c\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\36\61\1\0\4\61\1\0\5\61"+
    "\1\u010d\3\0\6\61\4\0\1\61\1\0\11\61\1\u010a"+
    "\24\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\25\61\1\u010e\10\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\36\61\1\0"+
    "\4\61\1\u010f\6\61\3\0\6\61\33\0\1\u0110\46\0"+
    "\1\u0111\70\0\1\u0112\63\0\1\61\1\0\36\61\1\0"+
    "\4\61\1\0\6\61\1\u0113\2\0\6\61\4\0\1\61"+
    "\1\0\5\61\1\u0114\30\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\4\61\1\u0115\31\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\30\61\1\u0116\5\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\36\61\1\0\4\61"+
    "\1\u0117\6\61\3\0\6\61\36\0\1\u0118\52\0\1\u0119"+
    "\70\0\1\u011a\54\0\1\61\1\0\36\61\1\0\4\61"+
    "\1\0\6\61\1\u011b\2\0\6\61\4\0\1\61\1\0"+
    "\7\61\1\u0114\26\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\10\61\1\u011c\25\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\14\61\1\u011d\21\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\16\61\1\u011e\17\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\5\61\1\u011f\6\61\1\u0120\21\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\36\61\1\0"+
    "\4\61\1\u0121\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\36\61\1\0\4\61\1\u0122\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\7\61\1\u0123\6\61\1\u0120\17\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\6\61\1\u0124\27\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\11\61\1\u0125\24\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\14\61\1\u0126\21\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\36\61\1\0\4\61\1\0"+
    "\1\61\1\u0127\4\61\3\0\6\61\4\0\1\61\1\0"+
    "\16\61\1\u0128\17\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\36\61\1\0\4\61\1\0"+
    "\3\61\1\u0129\2\61\3\0\6\61\4\0\1\61\1\0"+
    "\24\61\1\u012a\11\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\36\61\1\0\4\61\1\u012b"+
    "\6\61\3\0\6\61\21\0\1\u012c\53\0\1\61\1\0"+
    "\36\61\1\0\4\61\1\u012d\6\61\3\0\6\61\23\0"+
    "\1\u012e\51\0\1\61\1\0\27\61\1\u012f\6\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\21\0\1\u0130\116\0"+
    "\1\u0131\25\0\1\61\1\0\36\61\1\0\2\61\1\u0132"+
    "\1\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\36\61\1\0\2\61\1\u0133\1\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\33\61\1\u0134\2\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\50\0\1\u0135\43\0"+
    "\1\u0136\51\0\1\61\1\0\36\61\1\0\3\61\1\u0137"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\35\61"+
    "\1\u0134\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\36\61\1\0\3\61\1\u0138\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\36\61\1\0\2\61"+
    "\1\u0139\1\61\1\0\6\61\3\0\6\61\14\0\1\u013a"+
    "\60\0\1\61\1\0\5\61\1\u013b\30\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\36\61"+
    "\1\0\3\61\1\u0139\1\0\6\61\3\0\6\61\17\0"+
    "\1\u013c\55\0\1\61\1\0\7\61\1\u013b\26\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\17\61\1\u013d\16\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\25\0\1\u013e\70\0\1\u013f\71\0\1\u0140\56\0"+
    "\1\u0141\67\0\1\u0142\61\0\1\61\1\0\5\61\1\u0143"+
    "\6\61\1\u0144\21\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\21\61\1\u013d\14\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\27\0\1\u0145\70\0"+
    "\1\u0146\71\0\1\u0147\57\0\1\u0141\66\0\1\u0148\57\0"+
    "\1\61\1\0\7\61\1\u0149\6\61\1\u0144\17\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\25\61\1\u014a\10\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\30\61\1\u014b\5\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\6\61\1\u014c\27\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\14\0\1\u014d\73\0\1\u014e\55\0\1\61\1\0"+
    "\11\61\1\u014c\24\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\36\61\1\0\4\61\1\u014f"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\36\61\1\0"+
    "\4\61\1\u0150\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\3\61\1\u0151\32\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\36\61\1\0\2\61\1\u0152"+
    "\1\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\12\61\1\u0153\23\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\36\61\1\0\3\61\1\u0154"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\25\61"+
    "\1\u0155\10\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\14\0\1\u0156\102\0\1\u0157\61\0\1\u0158\101\0\1\u0159"+
    "\44\0\1\61\1\0\30\61\1\u015a\5\61\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\53\0\1\u015b\27\0\1\u015c"+
    "\62\0\1\61\1\0\36\61\1\0\2\61\1\u015d\1\61"+
    "\1\0\6\61\3\0\6\61\4\0\1\61\1\0\33\61"+
    "\1\u015e\2\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\16\0\1\u015f\127\0\1\u0160\17\0\1\61\1\0\36\61"+
    "\1\0\3\61\1\u0161\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\35\61\1\u015e\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\34\0\1\u0162\73\0\1\u0163\42\0\1\u0164"+
    "\144\0\1\u0165\36\0\1\u0166\106\0\1\u0167\23\0\1\61"+
    "\1\0\6\61\1\u0168\27\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\20\0\1\u0169\136\0\1\u0165\40\0\1\u016a"+
    "\103\0\1\u016b\23\0\1\61\1\0\11\61\1\u0168\24\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\6\61\1\u016c\27\61\1\0\4\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\11\61\1\u016d\24\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\34\0\1\u016e"+
    "\73\0\1\u016f\42\0\1\u0170\77\0\1\u0171\54\0\1\61"+
    "\1\0\36\61\1\0\2\61\1\u0172\1\61\1\0\6\61"+
    "\3\0\6\61\4\0\1\61\1\0\13\61\1\u0173\22\61"+
    "\1\0\4\61\1\0\6\61\3\0\6\61\4\0\1\61"+
    "\1\0\36\61\1\0\3\61\1\u0174\1\0\6\61\3\0"+
    "\6\61\4\0\1\61\1\0\15\61\1\u0175\20\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\4\0\1\61\1\0"+
    "\5\61\1\u0176\30\61\1\0\4\61\1\0\6\61\3\0"+
    "\6\61\11\0\1\u0177\71\0\1\u0178\76\0\1\u0177\66\0"+
    "\1\u0179\56\0\1\61\1\0\7\61\1\u017a\26\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\47\0\1\u017b\72\0"+
    "\1\u017c\23\0\1\61\1\0\33\61\1\u017d\2\61\1\0"+
    "\4\61\1\0\6\61\3\0\6\61\51\0\1\u017e\67\0"+
    "\1\u017f\24\0\1\61\1\0\35\61\1\u017d\1\0\4\61"+
    "\1\0\6\61\3\0\6\61\21\0\1\u0180\72\0\1\u0181"+
    "\61\0\1\u0182\67\0\1\u0183\107\0\1\u0184\55\0\1\u0182"+
    "\66\0\1\u0185\110\0\1\u0186\37\0\1\61\1\0\33\61"+
    "\1\u0187\2\61\1\0\4\61\1\0\6\61\3\0\6\61"+
    "\4\0\1\61\1\0\35\61\1\u0187\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\21\0\1\u0188\72\0\1\u0189\117\0"+
    "\1\u018a\72\0\1\u018b\20\0\1\61\1\0\5\61\1\u018c"+
    "\30\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\6\61\1\u018d\27\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\7\61\1\u018c"+
    "\26\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\11\61\1\u018e\24\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\4\61\1\u018f"+
    "\31\61\1\0\4\61\1\0\6\61\3\0\6\61\51\0"+
    "\1\u0190\70\0\1\u0191\23\0\1\61\1\0\10\61\1\u018f"+
    "\25\61\1\0\4\61\1\0\6\61\3\0\6\61\14\0"+
    "\1\u0192\65\0\1\u0193\77\0\1\u0194\67\0\1\u0195\76\0"+
    "\1\u0196\72\0\1\u0196\53\0\1\u0197\112\0\1\u0198\52\0"+
    "\1\u0197\111\0\1\u0199\56\0\1\u019a\72\0\1\u019a\113\0"+
    "\1\u019b\72\0\1\u019b\20\0\1\61\1\0\25\61\1\u019c"+
    "\10\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\30\61\1\u019d\5\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\21\0\1\u019e\72\0\1\u019f\116\0"+
    "\1\u01a0\71\0\1\u01a1\72\0\1\u01a1\65\0\1\u01a2\40\0"+
    "\1\u01a3\72\0\1\u01a4\51\0\1\61\1\0\3\61\1\u01a5"+
    "\32\61\1\0\4\61\1\0\6\61\3\0\6\61\4\0"+
    "\1\61\1\0\12\61\1\u01a6\23\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\13\0\1\u01a7\72\0\1\u01a7\64\0"+
    "\1\u01a8\77\0\1\u01a9\64\0\1\u01aa\73\0\1\u01ab\55\0"+
    "\1\61\1\0\17\61\1\u01ac\16\61\1\0\4\61\1\0"+
    "\6\61\3\0\6\61\4\0\1\61\1\0\21\61\1\u01ac"+
    "\14\61\1\0\4\61\1\0\6\61\3\0\6\61\52\0"+
    "\1\u01ad\72\0\1\u01ad\65\0\1\u01ae\70\0\1\u01af\51\0"+
    "\1\u01b0\73\0\1\u01b1\66\0\1\u01b2\73\0\1\u01b3\101\0"+
    "\1\u01b4\71\0\1\u01b5\67\0\1\u01b6\71\0\1\u01b7\71\0"+
    "\1\u01b8\70\0\1\u01b9\53\0\1\u01ba\73\0\1\u01bb\52\0"+
    "\1\u01bc\72\0\1\u01bd\105\0\1\u01be\72\0\1\u01bf\66\0"+
    "\1\u01c0\72\0\1\u01c1\40\0\1\u01c2\74\0\1\u01c3\77\0"+
    "\1\u01c4\72\0\1\u01c4\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22743];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\36\1\1\11\7\1\1\11\2\1"+
    "\1\11\1\1\1\0\24\1\1\0\5\1\1\0\17\1"+
    "\1\0\6\1\1\0\20\1\1\0\23\1\2\0\3\1"+
    "\2\0\17\1\3\0\5\1\3\0\17\1\1\11\10\1"+
    "\1\0\3\1\1\0\1\1\2\0\3\1\2\0\17\1"+
    "\3\0\5\1\3\0\22\1\1\0\1\1\1\0\1\1"+
    "\2\0\3\1\2\0\5\1\1\0\3\1\1\0\2\1"+
    "\5\0\3\1\5\0\5\1\2\0\10\1\4\0\1\1"+
    "\2\0\3\1\2\0\3\1\1\0\1\1\1\0\1\1"+
    "\3\0\1\11\1\0\2\1\4\0\4\1\4\0\5\1"+
    "\4\0\1\1\2\0\2\1\2\0\1\1\3\0\1\11"+
    "\2\0\1\1\3\0\2\1\4\0\5\1\1\11\2\0"+
    "\1\1\2\0\1\1\4\0\1\11\4\0\1\1\4\0"+
    "\4\1\6\0\2\11\2\0\2\11\2\1\3\0\1\11"+
    "\3\0\2\1\1\11\4\0\1\1\1\11\26\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public ControlsLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ControlsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ControlsTypes.UNKNOWN_CHARACTER;
            } 
            // fall through
          case 66: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 67: break;
          case 3: 
            { return ControlsTypes.MINUS;
            } 
            // fall through
          case 68: break;
          case 4: 
            { return ControlsTypes.NUMERIC_VALUE;
            } 
            // fall through
          case 69: break;
          case 5: 
            { return ControlsTypes.PERIOD;
            } 
            // fall through
          case 70: break;
          case 6: 
            { return ControlsTypes.A;
            } 
            // fall through
          case 71: break;
          case 7: 
            { return ControlsTypes.COMMA;
            } 
            // fall through
          case 72: break;
          case 8: 
            { return ControlsTypes.COLON;
            } 
            // fall through
          case 73: break;
          case 9: 
            { return ControlsTypes.PERCENT_SIGN;
            } 
            // fall through
          case 74: break;
          case 10: 
            { return ControlsTypes.WHITESPACE_RANGE;
            } 
            // fall through
          case 75: break;
          case 11: 
            { return ControlsTypes.IDENTIFIER;
            } 
            // fall through
          case 76: break;
          case 12: 
            { return ControlsTypes.OR;
            } 
            // fall through
          case 77: break;
          case 13: 
            { return ControlsTypes.OF;
            } 
            // fall through
          case 78: break;
          case 14: 
            { return ControlsTypes.TO;
            } 
            // fall through
          case 79: break;
          case 15: 
            { return ControlsTypes.AN;
            } 
            // fall through
          case 80: break;
          case 16: 
            { return ControlsTypes.IS;
            } 
            // fall through
          case 81: break;
          case 17: 
            { return ControlsTypes.IT;
            } 
            // fall through
          case 82: break;
          case 18: 
            { return ControlsTypes.IF;
            } 
            // fall through
          case 83: break;
          case 19: 
            { return ControlsTypes.SET;
            } 
            // fall through
          case 84: break;
          case 20: 
            { return ControlsTypes.THE;
            } 
            // fall through
          case 85: break;
          case 21: 
            { return ControlsTypes.ARE;
            } 
            // fall through
          case 86: break;
          case 22: 
            { return ControlsTypes.AND;
            } 
            // fall through
          case 87: break;
          case 23: 
            { return ControlsTypes.LOW;
            } 
            // fall through
          case 88: break;
          case 24: 
            { return ControlsTypes.SEMICOLON;
            } 
            // fall through
          case 89: break;
          case 25: 
            { return ControlsTypes.BUT;
            } 
            // fall through
          case 90: break;
          case 26: 
            { return ControlsTypes.DOES;
            } 
            // fall through
          case 91: break;
          case 27: 
            { return ControlsTypes.ELSE;
            } 
            // fall through
          case 92: break;
          case 28: 
            { return ControlsTypes.SETS;
            } 
            // fall through
          case 93: break;
          case 29: 
            { return ControlsTypes.THEN;
            } 
            // fall through
          case 94: break;
          case 30: 
            { return ControlsTypes.THAT;
            } 
            // fall through
          case 95: break;
          case 31: 
            { return ControlsTypes.WITH;
            } 
            // fall through
          case 96: break;
          case 32: 
            { return ControlsTypes.WHEN;
            } 
            // fall through
          case 97: break;
          case 33: 
            { return ControlsTypes.HATE;
            } 
            // fall through
          case 98: break;
          case 34: 
            { return ControlsTypes.HIGH;
            } 
            // fall through
          case 99: break;
          case 35: 
            { return ControlsTypes.TRULY;
            } 
            // fall through
          case 100: break;
          case 36: 
            { return ControlsTypes.NAMED;
            } 
            // fall through
          case 101: break;
          case 37: 
            { return ControlsTypes.MIGHT;
            } 
            // fall through
          case 102: break;
          case 38: 
            { return ControlsTypes.HATES;
            } 
            // fall through
          case 103: break;
          case 39: 
            { return ControlsTypes.LOWER;
            } 
            // fall through
          case 104: break;
          case 40: 
            { return ControlsTypes.REALLY;
            } 
            // fall through
          case 105: break;
          case 41: 
            { return ControlsTypes.NORMAL;
            } 
            // fall through
          case 106: break;
          case 42: 
            { return ControlsTypes.MIMICS;
            } 
            // fall through
          case 107: break;
          case 43: 
            { return ControlsTypes.WITHIN;
            } 
            // fall through
          case 108: break;
          case 44: 
            { return ControlsTypes.IF_NOT;
            } 
            // fall through
          case 109: break;
          case 45: 
            { return ControlsTypes.HIGHER;
            } 
            // fall through
          case 110: break;
          case 46: 
            { return ControlsTypes.LOWEST;
            } 
            // fall through
          case 111: break;
          case 47: 
            { return ControlsTypes.ROUGHLY;
            } 
            // fall through
          case 112: break;
          case 48: 
            { return ControlsTypes.I_THINK;
            } 
            // fall through
          case 113: break;
          case 49: 
            { return ControlsTypes.HIGHEST;
            } 
            // fall through
          case 114: break;
          case 50: 
            { return ControlsTypes.CONTROL;
            } 
            // fall through
          case 115: break;
          case 51: 
            { return ControlsTypes.EQUAL_TO;
            } 
            // fall through
          case 116: break;
          case 52: 
            { return ControlsTypes.ACTUALLY;
            } 
            // fall through
          case 117: break;
          case 53: 
            { return ControlsTypes.WHEN_NOT;
            } 
            // fall through
          case 118: break;
          case 54: 
            { return ControlsTypes.PRIORITY;
            } 
            // fall through
          case 119: break;
          case 55: 
            { return ControlsTypes.CONTROLS;
            } 
            // fall through
          case 120: break;
          case 56: 
            { return ControlsTypes.OTHERWISE;
            } 
            // fall through
          case 121: break;
          case 57: 
            { return ControlsTypes.MORE_THAN;
            } 
            // fall through
          case 122: break;
          case 58: 
            { return ControlsTypes.I_PROMISE;
            } 
            // fall through
          case 123: break;
          case 59: 
            { return ControlsTypes.LESS_THAN;
            } 
            // fall through
          case 124: break;
          case 60: 
            { return ControlsTypes.FIRST_OFF;
            } 
            // fall through
          case 125: break;
          case 61: 
            { return ControlsTypes.A_SCALE_OF;
            } 
            // fall through
          case 126: break;
          case 62: 
            { return ControlsTypes.THE_SAME_AS;
            } 
            // fall through
          case 127: break;
          case 63: 
            { return ControlsTypes.CALCULATION;
            } 
            // fall through
          case 128: break;
          case 64: 
            { return ControlsTypes.A_DEFAULT_OF;
            } 
            // fall through
          case 129: break;
          case 65: 
            { return ControlsTypes.HERES_WHAT_WILL_HAPPEN;
            } 
            // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
