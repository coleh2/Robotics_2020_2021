/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package net.coleh.controlslanguageplugin.parse.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import com.intellij.psi.TokenType;
import net.coleh.controlslanguageplugin.parse.ControlsTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>ControlsLexer.flex</tt>
 */
public class ControlsLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;
  public static final int IN_STRING = 4;
  public static final int IN_LINE_COMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15392 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\3\13\1\40\2\13\1\41"+
    "\1\1\1\13\1\42\4\1\1\13\1\43\1\1\1\44\1\22\7\13\1\45\1\24\1\34\1\46\1\35\1"+
    "\47\1\50\1\51\1\45\1\16\1\52\1\46\1\35\1\53\1\54\1\55\1\56\1\57\1\60\1\22"+
    "\1\35\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\35\1\61\1\66\1\67\1\45\1\70\1\71"+
    "\1\72\1\73\1\33\1\74\1\75\1\56\1\1\1\76\1\77\1\35\1\100\1\101\1\102\1\45\1"+
    "\1\1\76\1\77\1\35\1\103\1\101\1\104\1\45\1\105\1\106\1\77\1\13\1\37\1\107"+
    "\1\110\1\45\1\111\1\112\1\113\1\13\1\114\1\115\1\116\1\56\1\117\1\24\2\13"+
    "\1\31\1\120\1\121\2\1\1\122\1\123\1\124\1\125\1\126\1\127\2\1\1\63\1\130\1"+
    "\121\1\131\1\132\1\13\1\133\1\24\1\134\1\132\1\13\1\133\1\135\3\1\4\13\1\121"+
    "\4\13\1\41\2\13\1\136\2\13\1\137\24\13\1\140\1\141\2\13\1\140\2\13\1\142\1"+
    "\143\1\14\3\13\1\143\3\13\1\37\2\1\1\13\1\1\5\13\1\144\1\24\45\13\1\36\1\13"+
    "\1\145\1\31\4\13\1\146\1\147\1\150\1\151\1\13\1\151\1\13\1\152\1\150\1\153"+
    "\5\13\1\154\1\121\1\1\1\155\1\121\5\13\1\26\2\13\1\31\4\13\1\57\1\13\1\120"+
    "\2\42\1\56\1\13\1\41\1\151\2\13\1\42\1\13\2\121\2\1\1\13\1\42\3\13\1\120\1"+
    "\13\1\36\2\121\1\156\1\120\4\1\4\13\1\42\1\121\1\157\1\152\7\13\1\152\3\13"+
    "\1\26\1\100\2\13\1\41\1\147\4\1\1\160\1\13\1\161\17\13\1\162\21\13\1\144\2"+
    "\13\1\144\1\163\1\13\1\41\3\13\1\164\1\165\1\166\1\133\1\165\1\167\1\1\1\170"+
    "\1\171\1\63\1\172\1\1\1\173\1\1\1\133\3\1\2\13\1\63\1\174\1\175\1\176\1\127"+
    "\1\177\1\1\2\13\1\147\62\1\1\56\2\13\1\121\161\1\2\13\1\120\2\13\1\120\10"+
    "\13\1\200\1\152\2\13\1\136\3\13\1\201\1\171\1\13\1\202\4\203\2\13\2\1\1\171"+
    "\35\1\1\204\1\1\1\24\1\205\1\24\4\13\1\206\1\24\4\13\1\137\1\207\1\13\1\41"+
    "\1\24\4\13\1\120\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1\57\4\1\135\13\1\57\2"+
    "\1\10\13\1\133\4\1\2\13\1\41\20\13\1\133\1\13\1\42\1\1\3\13\1\210\7\13\1\16"+
    "\1\1\1\211\1\212\5\13\1\213\1\13\1\120\1\26\3\1\1\211\2\13\1\26\1\1\3\13\1"+
    "\152\4\13\1\57\1\121\1\13\1\214\2\13\1\41\2\13\1\152\1\13\1\133\4\13\1\215"+
    "\1\121\1\13\1\120\3\13\1\202\1\41\1\121\1\13\1\113\4\13\1\32\1\155\1\13\1"+
    "\216\1\217\1\220\1\203\2\13\1\137\1\57\7\13\1\221\1\121\72\13\1\152\1\13\1"+
    "\222\2\13\1\42\20\1\26\13\1\41\6\13\1\121\2\1\1\202\1\223\1\35\1\224\1\225"+
    "\6\13\1\16\1\1\1\226\25\13\1\41\1\1\4\13\1\212\2\13\1\26\2\1\1\42\1\13\1\1"+
    "\1\13\1\227\1\230\2\1\1\134\7\13\1\133\1\1\1\121\1\24\1\231\1\24\1\31\1\56"+
    "\4\13\1\120\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\41\2\1\7\13\1\31\4\1\3"+
    "\13\1\151\7\1\1\236\10\1\1\13\1\133\3\13\2\63\1\1\2\13\1\1\1\13\1\31\2\13"+
    "\1\31\1\13\1\41\2\13\1\237\1\240\2\1\11\13\1\41\1\121\2\13\1\237\1\13\1\42"+
    "\2\13\1\26\3\13\1\152\11\1\23\13\1\202\1\13\1\57\1\26\11\1\1\241\2\13\1\242"+
    "\1\13\1\57\1\13\1\202\1\13\1\120\4\1\1\13\1\243\1\13\1\57\1\13\1\121\4\1\3"+
    "\13\1\244\4\1\1\245\1\246\1\13\1\247\2\1\1\13\1\133\1\13\1\133\2\1\1\132\1"+
    "\13\1\202\1\1\3\13\1\57\1\13\1\57\1\13\1\32\1\13\1\16\6\1\4\13\1\147\3\1\3"+
    "\13\1\32\3\13\1\32\60\1\4\13\1\202\1\1\1\56\1\171\3\13\1\31\1\1\1\13\1\147"+
    "\1\121\3\13\1\134\1\1\2\13\1\250\4\13\1\251\1\252\2\1\1\13\1\22\1\13\1\253"+
    "\4\1\1\254\1\27\1\147\3\13\1\31\1\121\1\34\1\46\1\35\1\61\1\66\1\255\1\256"+
    "\1\151\10\1\4\13\1\31\1\121\2\1\4\13\1\257\1\121\12\1\3\13\1\260\1\63\1\261"+
    "\2\1\4\13\1\262\1\121\2\1\3\13\1\26\1\121\3\1\1\13\1\100\1\42\1\121\26\1\4"+
    "\13\1\121\1\171\34\1\3\13\1\147\20\1\1\35\2\13\1\14\1\63\1\121\1\1\1\212\1"+
    "\13\1\212\1\132\1\202\64\1\71\13\1\121\6\1\6\13\1\120\1\1\14\13\1\152\53\1"+
    "\2\13\1\120\75\1\44\13\1\202\33\1\43\13\1\147\1\13\1\120\1\121\6\1\1\13\1"+
    "\41\1\151\3\13\1\202\1\152\1\121\1\226\1\263\1\13\67\1\4\13\1\151\2\13\1\120"+
    "\1\171\1\13\4\1\1\63\1\1\76\13\1\133\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1"+
    "\31\1\133\1\147\1\264\114\1\1\265\1\266\1\267\1\1\1\270\11\1\1\271\33\1\5"+
    "\13\1\134\3\13\1\150\1\272\1\273\1\274\3\13\1\275\1\276\1\13\1\277\1\300\1"+
    "\77\24\13\1\260\1\13\1\77\1\137\1\13\1\137\1\13\1\134\1\13\1\134\1\120\1\13"+
    "\1\120\1\13\1\35\1\13\1\35\1\13\1\301\3\13\40\1\3\13\1\222\2\13\1\133\1\302"+
    "\1\303\1\157\1\24\25\1\1\14\1\213\1\304\75\1\14\13\1\151\1\202\2\1\4\13\1"+
    "\31\1\121\112\1\1\274\1\13\1\305\1\306\1\307\1\310\1\311\1\312\1\313\1\42"+
    "\1\314\1\42\47\1\1\13\1\121\1\13\1\121\1\13\1\121\47\1\55\13\1\202\2\1\103"+
    "\13\1\151\15\13\1\41\150\13\1\16\25\1\41\13\1\41\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3280 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\1\22\0\1\47\4\0\1\67\1\0\1\56\4\0\1\42\1\2\1\4\1\0\12\3\1\60\1\57"+
    "\5\0\1\21\1\62\1\55\1\27\1\14\1\52\1\44\1\35\1\34\1\5\1\64\1\46\1\26\1\25"+
    "\1\16\1\40\1\66\1\22\1\13\1\15\1\53\1\5\1\33\1\5\1\41\1\5\4\0\1\5\1\0\1\17"+
    "\1\61\1\54\1\6\1\10\1\50\1\43\1\32\1\31\1\5\1\63\1\45\1\24\1\23\1\7\1\36\1"+
    "\65\1\20\1\11\1\12\1\51\1\5\1\30\1\5\1\37\1\5\12\0\1\1\12\0\1\1\11\0\1\5\12"+
    "\0\1\5\4\0\1\5\5\0\27\5\1\0\12\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5\1\0\5\5"+
    "\1\0\2\5\2\0\4\5\1\0\1\5\6\0\1\5\1\0\3\5\1\0\1\5\1\0\4\5\1\0\23\5\1\0\11\5"+
    "\1\0\26\5\2\0\1\5\6\0\10\5\10\0\16\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\1\5\10\0"+
    "\13\5\5\0\3\5\15\0\12\5\4\0\6\5\1\0\10\5\2\0\12\5\1\0\23\5\2\0\14\5\2\0\11"+
    "\5\4\0\1\5\5\0\16\5\2\0\14\5\4\0\5\5\1\0\10\5\6\0\20\5\2\0\13\5\2\0\16\5\1"+
    "\0\1\5\3\0\4\5\2\0\11\5\2\0\2\5\2\0\4\5\10\0\1\5\4\0\2\5\1\0\1\5\1\0\3\5\1"+
    "\0\6\5\4\0\2\5\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5\3\0"+
    "\1\5\7\0\4\5\1\0\1\5\7\0\20\5\13\0\3\5\1\0\11\5\1\0\2\5\1\0\2\5\1\0\5\5\2"+
    "\0\12\5\1\0\3\5\1\0\3\5\2\0\1\5\30\0\1\5\7\0\3\5\1\0\10\5\2\0\6\5\2\0\2\5"+
    "\2\0\3\5\10\0\2\5\4\0\2\5\1\0\1\5\1\0\1\5\20\0\2\5\1\0\6\5\3\0\3\5\1\0\4\5"+
    "\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\5\5\3\0\3\5\1\0\4\5\2\0\1\5\6"+
    "\0\1\5\10\0\4\5\1\0\10\5\1\0\3\5\1\0\30\5\3\0\10\5\1\0\3\5\1\0\4\5\7\0\2\5"+
    "\1\0\3\5\5\0\4\5\1\0\5\5\2\0\4\5\5\0\2\5\7\0\1\5\2\0\2\5\16\0\3\5\1\0\10\5"+
    "\1\0\7\5\1\0\3\5\1\0\5\5\5\0\4\5\7\0\1\5\12\0\6\5\2\0\2\5\1\0\22\5\3\0\10"+
    "\5\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\5\4\0\6\5\1\0\1\5\1\0\10\5\2\0\2\5\14\0"+
    "\17\5\1\0\12\5\7\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0"+
    "\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\15\5\1\0\3\5\2\0\5\5\1\0\1\5\1\0\6\5\2\0"+
    "\12\5\2\0\4\5\10\0\2\5\13\0\1\5\1\0\1\5\1\0\1\5\4\0\12\5\1\0\24\5\3\0\5\5"+
    "\1\0\12\5\6\0\1\5\11\0\6\5\1\0\1\5\5\0\1\5\2\0\13\5\1\0\15\5\1\0\4\5\2\0\7"+
    "\5\1\0\1\5\1\0\4\5\2\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\16\5\2\0\6"+
    "\5\2\0\1\1\32\5\3\0\13\5\7\0\15\5\1\0\7\5\13\0\4\5\14\0\1\5\1\0\2\5\14\0\4"+
    "\5\3\0\1\5\4\0\2\5\15\0\3\5\11\0\1\5\23\0\10\5\1\0\23\5\1\0\2\5\6\0\6\5\5"+
    "\0\15\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\6\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3"+
    "\0\4\5\2\0\6\5\4\0\13\1\15\0\2\1\5\0\1\1\17\0\1\5\4\0\1\5\12\0\1\1\1\0\1\5"+
    "\15\0\1\5\2\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\1\5\5\0\5\5\4\0\1\5\1\0\5\5\6\0\15\5\7\0\10\5\11\0\7\5\1\0\7"+
    "\5\1\0\1\1\4\0\3\5\11\0\5\5\2\0\5\5\3\0\7\5\2\0\2\5\2\0\3\5\5\0\16\5\1\0\12"+
    "\5\1\0\1\5\7\0\11\5\2\0\27\5\2\0\15\5\3\0\1\5\1\0\1\5\2\0\1\5\16\0\1\5\2\0"+
    "\5\5\12\0\6\5\2\0\6\5\2\0\6\5\11\0\13\5\1\0\2\5\2\0\7\5\4\0\5\5\3\0\5\5\5"+
    "\0\12\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\12\5\3\0\15\5\3\0\2\5\30\0\16"+
    "\5\4\0\1\5\2\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0\14\5\1\0\16\5\1\0\2\5\1\0\1"+
    "\5\15\0\1\5\2\0\4\5\4\0\10\5\1\0\5\5\12\0\6\5\2\0\1\5\1\0\14\5\1\0\2\5\3\0"+
    "\1\5\2\0\4\5\1\0\2\5\12\0\10\5\6\0\6\5\1\0\2\5\5\0\10\5\1\0\3\5\1\0\13\5\4"+
    "\0\3\5\4\0\5\5\2\0\1\5\11\0\5\5\5\0\3\5\3\0\13\5\1\0\1\5\3\0\10\5\6\0\1\5"+
    "\1\0\7\5\1\0\1\5\1\0\4\5\1\0\2\5\6\0\1\5\5\0\7\5\2\0\7\5\3\0\6\5\1\0\1\5\10"+
    "\0\6\5\2\0\10\5\10\0\6\5\2\0\1\5\3\0\1\5\13\0\10\5\5\0\15\5\3\0\2\5\6\0\5"+
    "\5\3\0\6\5\10\0\10\5\2\0\7\5\16\0\4\5\4\0\3\5\15\0\1\5\2\0\2\5\2\0\4\5\1\0"+
    "\14\5\1\0\1\5\1\0\7\5\1\0\21\5\1\0\4\5\2\0\10\5\1\0\7\5\1\0\14\5\1\0\4\5\1"+
    "\0\5\5\1\0\1\5\3\0\11\5\1\0\10\5\2\0\2\5\5\0\1\5\16\0\1\5\13\0\2\5\1\0\2\5"+
    "\1\0\5\5\6\0\2\5\1\0\1\5\2\0\1\5\1\0\12\5\1\0\4\5\1\0\1\5\1\0\1\5\6\0\1\5"+
    "\4\0\1\5\1\0\1\5\1\0\1\5\1\0\3\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0\1\5\1\0\1\5\1"+
    "\0\1\5\1\0\1\5\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5\1\0\4\5\1\0\4\5\1\0\1\5\1\0"+
    "\12\5\1\0\5\5\1\0\3\5\1\0\5\5\1\0\5\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\12\4\1\6"+
    "\1\4\1\6\15\4\1\7\6\4\1\1\1\10\2\4"+
    "\1\11\1\12\1\13\1\0\1\13\2\4\1\14\1\15"+
    "\3\4\1\16\11\4\1\17\1\0\4\4\1\17\1\0"+
    "\15\4\1\20\1\21\1\0\1\22\5\4\1\0\1\22"+
    "\17\4\1\0\6\4\1\23\1\4\1\24\1\4\1\23"+
    "\3\4\1\24\2\4\1\25\1\26\2\0\3\4\2\0"+
    "\17\4\3\0\5\4\3\0\5\4\1\27\2\4\1\27"+
    "\6\4\1\30\1\31\1\32\1\4\1\33\1\4\1\34"+
    "\1\4\1\35\1\0\1\36\2\4\1\0\1\4\2\0"+
    "\3\4\2\0\15\4\1\37\1\40\3\0\1\4\1\41"+
    "\1\42\1\37\1\40\3\0\1\4\1\41\1\42\16\4"+
    "\1\43\1\0\1\4\1\0\1\4\2\0\3\4\2\0"+
    "\4\4\1\44\1\0\1\4\1\45\1\4\1\0\2\4"+
    "\5\0\1\46\2\4\5\0\4\4\1\47\2\0\10\4"+
    "\4\0\1\4\2\0\2\4\1\50\2\0\2\4\1\51"+
    "\1\0\1\52\1\0\1\53\3\0\1\54\1\0\1\4"+
    "\1\55\4\0\3\4\1\56\4\0\5\4\4\0\1\4"+
    "\2\0\1\4\1\57\2\0\1\4\3\0\1\60\2\0"+
    "\1\61\3\0\2\4\4\0\1\62\1\4\1\62\2\4"+
    "\1\63\2\0\1\4\2\0\1\64\4\0\1\65\4\0"+
    "\1\66\4\0\1\67\2\4\1\70\6\0\1\71\1\72"+
    "\2\0\1\73\1\74\2\4\3\0\1\75\3\0\2\4"+
    "\1\76\4\0\1\77\1\100\26\0\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\70\0\160\0\250\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690"+
    "\0\u06c8\0\70\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818"+
    "\0\u0850\0\70\0\u0888\0\u08c0\0\70\0\160\0\250\0\u0118"+
    "\0\u0118\0\u08f8\0\u0930\0\u0150\0\u0150\0\u0968\0\u09a0\0\u09d8"+
    "\0\u0150\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20"+
    "\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0"+
    "\0\u0f18\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u0150"+
    "\0\u0150\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0"+
    "\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0"+
    "\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570"+
    "\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730"+
    "\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0"+
    "\0\u1928\0\u1960\0\u1998\0\u0150\0\u0150\0\u19d0\0\u1a08\0\u1a40"+
    "\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00"+
    "\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u1dc0"+
    "\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80"+
    "\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140"+
    "\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300"+
    "\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\70\0\u0150\0\u0150"+
    "\0\u2450\0\u0150\0\u2488\0\u0150\0\u24c0\0\u0150\0\u24f8\0\u0150"+
    "\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8"+
    "\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878"+
    "\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38"+
    "\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8"+
    "\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8"+
    "\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78"+
    "\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u0150\0\u3100"+
    "\0\u3138\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0"+
    "\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u0150\0\u3448"+
    "\0\u3480\0\u0150\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0"+
    "\0\u3608\0\u3640\0\u3678\0\u0150\0\u36b0\0\u36e8\0\u3720\0\u3758"+
    "\0\u3790\0\u37c8\0\u3800\0\u3838\0\u3870\0\u38a8\0\u38e0\0\u0150"+
    "\0\u3918\0\u3950\0\u3988\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\u3aa0"+
    "\0\u3ad8\0\u3b10\0\u3b48\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60"+
    "\0\u3c98\0\u3cd0\0\u3d08\0\u0150\0\u3d40\0\u3d78\0\u3db0\0\u3de8"+
    "\0\u0150\0\u3e20\0\u0150\0\u3e58\0\u0150\0\u3e90\0\u3ec8\0\u3f00"+
    "\0\70\0\u3f38\0\u3f70\0\u0150\0\u3fa8\0\u3fe0\0\u4018\0\u4050"+
    "\0\u4088\0\u40c0\0\u40f8\0\u0150\0\u4130\0\u4168\0\u41a0\0\u41d8"+
    "\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0\0\u4328\0\u4360\0\u4398"+
    "\0\u43d0\0\u4408\0\u4440\0\u4478\0\u44b0\0\u0150\0\u44e8\0\u4520"+
    "\0\u4558\0\u4590\0\u45c8\0\u4600\0\70\0\u4638\0\u4670\0\u0150"+
    "\0\u46a8\0\u46e0\0\u4718\0\u4750\0\u4788\0\u47c0\0\u47f8\0\u4830"+
    "\0\u4868\0\u48a0\0\u48d8\0\u4910\0\u4948\0\u4980\0\70\0\u49b8"+
    "\0\u49f0\0\u4a28\0\u4a60\0\u4a98\0\u0150\0\u4ad0\0\u4b08\0\u4b40"+
    "\0\u4b78\0\70\0\u4bb0\0\u4be8\0\u4c20\0\u4c58\0\u0150\0\u4c90"+
    "\0\u4cc8\0\u4d00\0\u4d38\0\u0150\0\u4d70\0\u4da8\0\u0150\0\u4de0"+
    "\0\u4e18\0\u4e50\0\u4e88\0\u4ec0\0\u4ef8\0\70\0\70\0\u4f30"+
    "\0\u4f68\0\70\0\70\0\u4fa0\0\u4fd8\0\u5010\0\u5048\0\u5080"+
    "\0\70\0\u50b8\0\u50f0\0\u5128\0\u5160\0\u5198\0\70\0\u51d0"+
    "\0\u5208\0\u5240\0\u5278\0\u0150\0\70\0\u52b0\0\u52e8\0\u5320"+
    "\0\u5358\0\u5390\0\u53c8\0\u5400\0\u5438\0\u5470\0\u54a8\0\u54e0"+
    "\0\u5518\0\u5550\0\u5588\0\u55c0\0\u55f8\0\u5630\0\u5668\0\u56a0"+
    "\0\u56d8\0\u5710\0\u5748\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\10"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\10"+
    "\1\41\1\10\1\42\2\10\1\43\1\44\1\4\1\45"+
    "\1\10\1\46\1\10\1\47\1\50\1\51\1\3\1\52"+
    "\1\53\1\54\4\10\1\55\71\0\1\56\45\0\1\56"+
    "\23\0\1\57\1\60\66\0\1\6\1\60\35\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\61\67\0"+
    "\1\10\1\0\35\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\2\10\1\62\32\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\5\10\1\63\5\10\1\64\21\10\1\0\4\10\1\0"+
    "\1\65\5\10\3\0\6\10\4\0\1\10\1\0\35\10"+
    "\1\0\2\10\1\66\1\10\1\0\6\10\3\0\4\10"+
    "\1\67\1\10\4\0\1\10\1\0\3\10\1\70\31\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\2\10\1\71\10\10\1\72\11\10\1\73\7\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\7\10\1\74\25\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\35\10\1\0\3\10"+
    "\1\75\1\0\6\10\3\0\5\10\1\76\4\0\1\10"+
    "\1\0\11\10\1\71\3\10\1\77\12\10\1\100\4\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\10\10\1\101\4\10\1\64\17\10\1\0\4\10"+
    "\1\0\2\10\1\65\3\10\3\0\6\10\4\0\1\10"+
    "\1\0\13\10\1\102\2\10\1\103\16\10\1\0\4\10"+
    "\1\104\4\10\1\105\1\10\3\0\6\10\4\0\1\10"+
    "\1\0\2\10\1\106\1\107\31\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\15\10\1\110"+
    "\2\10\1\111\14\10\1\0\4\10\1\112\5\10\1\113"+
    "\3\0\6\10\4\0\1\10\1\0\7\10\1\114\1\10"+
    "\1\115\23\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\2\10\1\116\7\10\1\117\22\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\2\10\1\120\21\10\1\121\10\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\11\10"+
    "\1\122\2\10\1\123\20\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\11\10\1\124\15\10"+
    "\1\125\5\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\24\10\1\126\1\127\7\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\4\10\1\130\1\131\27\10\1\0\4\10\1\132\1\133"+
    "\5\10\3\0\6\10\4\0\1\10\1\0\3\10\1\134"+
    "\6\10\1\135\11\10\1\136\10\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\27\10\1\137"+
    "\1\140\4\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\6\10\1\130\1\10\1\131\24\10"+
    "\1\0\4\10\1\141\2\10\1\142\3\10\3\0\6\10"+
    "\4\0\1\10\1\0\7\10\1\143\4\10\1\144\12\10"+
    "\1\145\5\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\13\10\1\146\21\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\15\10"+
    "\1\147\17\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\2\10\1\150\1\151\31\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\7\10\1\152\1\10\1\153\23\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\24\10\1\154"+
    "\10\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\27\10\1\155\5\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\2\10\1\156"+
    "\7\10\1\157\22\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\11\10\1\160\2\10\1\161"+
    "\20\10\1\0\4\10\1\0\6\10\3\0\6\10\60\0"+
    "\1\162\13\0\1\10\1\0\35\10\1\0\4\10\1\0"+
    "\1\10\1\163\4\10\3\0\6\10\4\0\1\10\1\0"+
    "\35\10\1\0\4\10\1\0\3\10\1\164\2\10\3\0"+
    "\6\10\4\0\1\10\1\0\3\10\1\165\31\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\25\10\1\166\7\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\4\10\1\167\30\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\35\10\1\0\4\10\1\0\1\10\1\170\4\10\3\0"+
    "\6\10\4\0\1\10\1\0\5\10\1\171\27\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\35\10\1\0\4\10\1\0\1\10\1\172\4\10\3\0"+
    "\6\10\4\0\1\10\1\0\3\10\1\173\6\10\1\174"+
    "\22\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\10\10\1\175\24\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\6\10\1\176"+
    "\26\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\35\10\1\0\4\10\1\0\3\10\1\177"+
    "\2\10\3\0\6\10\4\0\1\10\1\0\35\10\1\0"+
    "\4\10\1\0\3\10\1\200\2\10\3\0\6\10\4\0"+
    "\1\10\1\0\7\10\1\201\4\10\1\202\20\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\30\10\1\203\4\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\3\10\1\204\31\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\1\10\1\205\33\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\7\0\1\206\2\0\1\207\61\0\1\10\1\0"+
    "\5\10\1\210\27\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\35\10\1\0\4\10\1\0"+
    "\1\10\1\211\4\10\3\0\6\10\4\0\1\10\1\0"+
    "\12\10\1\212\22\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\7\10\1\204\25\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\22\10\1\205\12\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\14\0\1\213\13\0\1\214\43\0\1\10\1\0"+
    "\10\10\1\215\24\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\14\10\1\216\20\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\35\10\1\0\4\10\1\0\3\10\1\217\2\10\3\0"+
    "\6\10\4\0\1\10\1\0\13\10\1\220\21\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\17\10\1\221\15\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\13\10\1\222\21\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\17\10\1\223\15\10\1\0\1\224\3\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\15\10\1\225\17\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\21\10\1\226\13\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\15\10\1\227\17\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\21\10\1\230\13\10\1\0\1\10\1\231\2\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\5\10"+
    "\1\232\27\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\3\10\1\233\31\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\13\0\1\234\23\0\1\235"+
    "\34\0\1\10\1\0\35\10\1\0\4\10\1\236\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\13\10\1\237\21\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\5\10\1\240\27\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\35\10\1\0\1\241"+
    "\3\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\10\10\1\242\24\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\7\10\1\243\25\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\16\0\1\244\22\0"+
    "\1\245\32\0\1\10\1\0\35\10\1\0\4\10\1\246"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\15\10\1\247"+
    "\17\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\10\10\1\250\24\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\35\10\1\0"+
    "\1\10\1\251\2\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\24\10\1\252\10\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\27\10\1\253"+
    "\5\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\23\10\1\254\11\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\4\10\1\255"+
    "\30\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\6\10\1\256\26\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\26\10\1\257"+
    "\6\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\13\10\1\260\21\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\15\10\1\261"+
    "\17\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\16\10\1\262\16\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\35\10\1\0"+
    "\2\10\1\263\1\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\20\10\1\264\14\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\35\10\1\0"+
    "\3\10\1\265\1\0\6\10\3\0\6\10\57\0\1\266"+
    "\14\0\1\10\1\0\5\10\1\267\27\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\10\10"+
    "\1\267\24\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\4\10\1\270\30\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\3\10"+
    "\1\271\31\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\3\10\1\272\31\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\12\10"+
    "\1\273\22\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\4\10\1\274\30\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\35\10"+
    "\1\0\2\10\1\275\1\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\16\10\1\276\16\10\1\0\4\10"+
    "\1\277\6\10\3\0\6\10\4\0\1\10\1\0\5\10"+
    "\1\300\27\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\6\10\1\274\26\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\7\10"+
    "\1\272\25\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\14\10\1\301\20\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\35\10"+
    "\1\0\3\10\1\302\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\20\10\1\276\14\10\1\0\4\10\1\303"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\10\10\1\300"+
    "\24\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\7\10\1\304\25\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\11\0\1\305\133\0\1\306\16\0"+
    "\1\10\1\0\35\10\1\0\4\10\1\0\1\10\1\307"+
    "\4\10\3\0\6\10\4\0\1\10\1\0\35\10\1\0"+
    "\1\310\3\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\35\10\1\0\2\10\1\311\1\10\1\0\6\10"+
    "\3\0\6\10\56\0\1\312\26\0\1\313\56\0\1\10"+
    "\1\0\35\10\1\0\4\10\1\0\3\10\1\314\2\10"+
    "\3\0\6\10\4\0\1\10\1\0\35\10\1\0\3\10"+
    "\1\315\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\35\10\1\0\1\10\1\316\2\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\17\10\1\317\15\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\3\10\1\320\31\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\3\10\1\321\31\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\24\10\1\322\10\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\25\10\1\323\7\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\21\10\1\324\13\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\7\10\1\325\25\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\7\10\1\326\25\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\27\10\1\327\5\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\30\10\1\330\4\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\25\10\1\331\7\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\16\10\1\332\16\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\33\0\1\333\55\0\1\334\72\0\1\335\47\0"+
    "\1\10\1\0\3\10\1\336\31\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\3\10\1\337"+
    "\31\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\25\10\1\340\7\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\30\10\1\341"+
    "\4\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\20\10\1\342\14\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\36\0\1\343\54\0\1\344\72\0"+
    "\1\345\45\0\1\10\1\0\7\10\1\346\25\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\7\10\1\347\25\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\30\10\1\350\4\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\2\10\1\351\32\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\11\10\1\352\23\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\3\10\1\353\31\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\4\10\1\354\30\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\6\10\1\355\26\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\7\10\1\356\25\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\4\10\1\357\30\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\6\10\1\360\26\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\5\10\1\361\27\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\35\10\1\0\4\10\1\0"+
    "\4\10\1\362\1\10\3\0\6\10\4\0\1\10\1\0"+
    "\10\10\1\363\24\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\35\10\1\0\4\10\1\0"+
    "\5\10\1\364\3\0\6\10\4\0\1\10\1\0\13\10"+
    "\1\365\21\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\35\10\1\0\2\10\1\366\1\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\32\10"+
    "\1\367\2\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\12\0\1\370\61\0\1\10\1\0\35\10\1\0\3\10"+
    "\1\371\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\34\10\1\367\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\14\0\1\372\57\0\1\10\1\0\15\10\1\373\17\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\51\0\1\374"+
    "\36\0\1\375\53\0\1\10\1\0\12\10\1\376\22\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\25\10\1\377\7\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\35\10\1\0\2\10"+
    "\1\u0100\1\10\1\0\6\10\3\0\6\10\22\0\1\u0101"+
    "\120\0\1\u0102\20\0\1\10\1\0\14\10\1\u0103\20\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\35\10\1\0\3\10\1\u0104\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\30\10\1\u0105\4\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\12\10\1\u0106\22\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\1\10\1\u0107\33\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\35\10\1\0\4\10\1\u0108\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\35\10\1\0\4\10\1\0\4\10\1\u0109"+
    "\1\10\3\0\6\10\4\0\1\10\1\0\5\10\1\u010a"+
    "\27\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\14\10\1\u010b\20\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\22\10\1\u0107"+
    "\12\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\35\10\1\0\4\10\1\u010c\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\35\10\1\0\4\10\1\0"+
    "\5\10\1\u010d\3\0\6\10\4\0\1\10\1\0\10\10"+
    "\1\u010a\24\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\24\10\1\u010e\10\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\35\10"+
    "\1\0\4\10\1\u010f\6\10\3\0\6\10\32\0\1\u0110"+
    "\45\0\1\u0111\67\0\1\u0112\63\0\1\10\1\0\35\10"+
    "\1\0\4\10\1\0\6\10\1\u0113\2\0\6\10\4\0"+
    "\1\10\1\0\4\10\1\u0114\30\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\3\10\1\u0115"+
    "\31\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\27\10\1\u0116\5\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\35\10\1\0"+
    "\4\10\1\u0117\6\10\3\0\6\10\35\0\1\u0118\51\0"+
    "\1\u0119\67\0\1\u011a\54\0\1\10\1\0\35\10\1\0"+
    "\4\10\1\0\6\10\1\u011b\2\0\6\10\4\0\1\10"+
    "\1\0\6\10\1\u0114\26\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\7\10\1\u011c\25\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\13\10\1\u011d\21\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\15\10\1\u011e\17\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\4\10\1\u011f\6\10\1\u0120\21\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\35\10"+
    "\1\0\4\10\1\u0121\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\35\10\1\0\4\10\1\u0122\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\6\10\1\u0123\6\10\1\u0120\17\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\5\10\1\u0124\27\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\10\10\1\u0125\24\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\13\10\1\u0126\21\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\35\10\1\0\4\10"+
    "\1\0\1\10\1\u0127\4\10\3\0\6\10\4\0\1\10"+
    "\1\0\15\10\1\u0128\17\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\35\10\1\0\4\10"+
    "\1\0\3\10\1\u0129\2\10\3\0\6\10\4\0\1\10"+
    "\1\0\23\10\1\u012a\11\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\35\10\1\0\4\10"+
    "\1\u012b\6\10\3\0\6\10\20\0\1\u012c\53\0\1\10"+
    "\1\0\35\10\1\0\4\10\1\u012d\6\10\3\0\6\10"+
    "\22\0\1\u012e\51\0\1\10\1\0\26\10\1\u012f\6\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\20\0\1\u0130"+
    "\115\0\1\u0131\25\0\1\10\1\0\35\10\1\0\2\10"+
    "\1\u0132\1\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\35\10\1\0\2\10\1\u0133\1\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\32\10\1\u0134\2\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\47\0\1\u0135"+
    "\42\0\1\u0136\51\0\1\10\1\0\35\10\1\0\3\10"+
    "\1\u0137\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\34\10\1\u0134\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\35\10\1\0\3\10\1\u0138\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\35\10\1\0"+
    "\2\10\1\u0139\1\10\1\0\6\10\3\0\6\10\13\0"+
    "\1\u013a\60\0\1\10\1\0\4\10\1\u013b\30\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\35\10\1\0\3\10\1\u0139\1\0\6\10\3\0\6\10"+
    "\16\0\1\u013c\55\0\1\10\1\0\6\10\1\u013b\26\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\16\10\1\u013d\16\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\24\0\1\u013e\67\0\1\u013f\70\0\1\u0140"+
    "\55\0\1\u0141\66\0\1\u0142\61\0\1\10\1\0\4\10"+
    "\1\u0143\6\10\1\u0144\21\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\20\10\1\u013d\14\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\26\0\1\u0145"+
    "\67\0\1\u0146\70\0\1\u0147\56\0\1\u0141\65\0\1\u0148"+
    "\57\0\1\10\1\0\6\10\1\u0149\6\10\1\u0144\17\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\24\10\1\u014a\10\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\27\10\1\u014b\5\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\5\10\1\u014c\27\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\13\0\1\u014d\72\0\1\u014e\55\0\1\10"+
    "\1\0\10\10\1\u014c\24\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\35\10\1\0\4\10"+
    "\1\u014f\6\10\3\0\6\10\4\0\1\10\1\0\35\10"+
    "\1\0\4\10\1\u0150\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\2\10\1\u0151\32\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\35\10\1\0\2\10"+
    "\1\u0152\1\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\11\10\1\u0153\23\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\35\10\1\0\3\10"+
    "\1\u0154\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\24\10\1\u0155\10\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\13\0\1\u0156\101\0\1\u0157\60\0\1\u0158\100\0"+
    "\1\u0159\44\0\1\10\1\0\27\10\1\u015a\5\10\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\52\0\1\u015b\26\0"+
    "\1\u015c\62\0\1\10\1\0\35\10\1\0\2\10\1\u015d"+
    "\1\10\1\0\6\10\3\0\6\10\4\0\1\10\1\0"+
    "\32\10\1\u015e\2\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\15\0\1\u015f\126\0\1\u0160\17\0\1\10\1\0"+
    "\35\10\1\0\3\10\1\u0161\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\34\10\1\u015e\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\33\0\1\u0162\72\0\1\u0163\41\0"+
    "\1\u0164\143\0\1\u0165\35\0\1\u0166\105\0\1\u0167\23\0"+
    "\1\10\1\0\5\10\1\u0168\27\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\17\0\1\u0169\135\0\1\u0165\37\0"+
    "\1\u016a\102\0\1\u016b\23\0\1\10\1\0\10\10\1\u0168"+
    "\24\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\5\10\1\u016c\27\10\1\0\4\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\10\10\1\u016d"+
    "\24\10\1\0\4\10\1\0\6\10\3\0\6\10\33\0"+
    "\1\u016e\72\0\1\u016f\41\0\1\u0170\76\0\1\u0171\54\0"+
    "\1\10\1\0\35\10\1\0\2\10\1\u0172\1\10\1\0"+
    "\6\10\3\0\6\10\4\0\1\10\1\0\12\10\1\u0173"+
    "\22\10\1\0\4\10\1\0\6\10\3\0\6\10\4\0"+
    "\1\10\1\0\35\10\1\0\3\10\1\u0174\1\0\6\10"+
    "\3\0\6\10\4\0\1\10\1\0\14\10\1\u0175\20\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\4\0\1\10"+
    "\1\0\4\10\1\u0176\30\10\1\0\4\10\1\0\6\10"+
    "\3\0\6\10\10\0\1\u0177\70\0\1\u0178\75\0\1\u0177"+
    "\65\0\1\u0179\56\0\1\10\1\0\6\10\1\u017a\26\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\46\0\1\u017b"+
    "\71\0\1\u017c\23\0\1\10\1\0\32\10\1\u017d\2\10"+
    "\1\0\4\10\1\0\6\10\3\0\6\10\50\0\1\u017e"+
    "\66\0\1\u017f\24\0\1\10\1\0\34\10\1\u017d\1\0"+
    "\4\10\1\0\6\10\3\0\6\10\20\0\1\u0180\71\0"+
    "\1\u0181\60\0\1\u0182\66\0\1\u0183\106\0\1\u0184\54\0"+
    "\1\u0182\65\0\1\u0185\107\0\1\u0186\37\0\1\10\1\0"+
    "\32\10\1\u0187\2\10\1\0\4\10\1\0\6\10\3\0"+
    "\6\10\4\0\1\10\1\0\34\10\1\u0187\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\20\0\1\u0188\71\0\1\u0189"+
    "\116\0\1\u018a\71\0\1\u018b\20\0\1\10\1\0\4\10"+
    "\1\u018c\30\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\5\10\1\u018d\27\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\6\10"+
    "\1\u018c\26\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\10\10\1\u018e\24\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\3\10"+
    "\1\u018f\31\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\50\0\1\u0190\67\0\1\u0191\23\0\1\10\1\0\7\10"+
    "\1\u018f\25\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\13\0\1\u0192\64\0\1\u0193\76\0\1\u0194\66\0\1\u0195"+
    "\75\0\1\u0196\71\0\1\u0196\52\0\1\u0197\111\0\1\u0198"+
    "\51\0\1\u0197\110\0\1\u0199\55\0\1\u019a\71\0\1\u019a"+
    "\112\0\1\u019b\71\0\1\u019b\20\0\1\10\1\0\24\10"+
    "\1\u019c\10\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\27\10\1\u019d\5\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\20\0\1\u019e\71\0\1\u019f"+
    "\115\0\1\u01a0\70\0\1\u01a1\71\0\1\u01a1\64\0\1\u01a2"+
    "\37\0\1\u01a3\71\0\1\u01a4\51\0\1\10\1\0\2\10"+
    "\1\u01a5\32\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\4\0\1\10\1\0\11\10\1\u01a6\23\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\12\0\1\u01a7\71\0\1\u01a7"+
    "\63\0\1\u01a8\76\0\1\u01a9\63\0\1\u01aa\72\0\1\u01ab"+
    "\55\0\1\10\1\0\16\10\1\u01ac\16\10\1\0\4\10"+
    "\1\0\6\10\3\0\6\10\4\0\1\10\1\0\20\10"+
    "\1\u01ac\14\10\1\0\4\10\1\0\6\10\3\0\6\10"+
    "\51\0\1\u01ad\71\0\1\u01ad\64\0\1\u01ae\67\0\1\u01af"+
    "\50\0\1\u01b0\72\0\1\u01b1\65\0\1\u01b2\72\0\1\u01b3"+
    "\100\0\1\u01b4\70\0\1\u01b5\66\0\1\u01b6\70\0\1\u01b7"+
    "\70\0\1\u01b8\67\0\1\u01b9\52\0\1\u01ba\72\0\1\u01bb"+
    "\51\0\1\u01bc\71\0\1\u01bd\104\0\1\u01be\71\0\1\u01bf"+
    "\65\0\1\u01c0\71\0\1\u01c1\37\0\1\u01c2\73\0\1\u01c3"+
    "\76\0\1\u01c4\71\0\1\u01c4\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\10\1\11\36\1\1\11\7\1\1\11\2\1"+
    "\1\11\2\1\1\0\23\1\1\0\5\1\1\0\17\1"+
    "\1\0\6\1\1\0\20\1\1\0\23\1\2\0\3\1"+
    "\2\0\17\1\3\0\5\1\3\0\17\1\1\11\10\1"+
    "\1\0\3\1\1\0\1\1\2\0\3\1\2\0\17\1"+
    "\3\0\5\1\3\0\22\1\1\0\1\1\1\0\1\1"+
    "\2\0\3\1\2\0\5\1\1\0\3\1\1\0\2\1"+
    "\5\0\3\1\5\0\5\1\2\0\10\1\4\0\1\1"+
    "\2\0\3\1\2\0\3\1\1\0\1\1\1\0\1\1"+
    "\3\0\1\11\1\0\2\1\4\0\4\1\4\0\5\1"+
    "\4\0\1\1\2\0\2\1\2\0\1\1\3\0\1\11"+
    "\2\0\1\1\3\0\2\1\4\0\5\1\1\11\2\0"+
    "\1\1\2\0\1\1\4\0\1\11\4\0\1\1\4\0"+
    "\4\1\6\0\2\11\2\0\2\11\2\1\3\0\1\11"+
    "\3\0\2\1\1\11\4\0\1\1\1\11\26\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[452];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public ControlsLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ControlsLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ControlsTypes.UNKNOWN_CHARACTER;
            } 
            // fall through
          case 66: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 67: break;
          case 3: 
            { return ControlsTypes.MINUS;
            } 
            // fall through
          case 68: break;
          case 4: 
            { return ControlsTypes.IDENTIFIER;
            } 
            // fall through
          case 69: break;
          case 5: 
            { return ControlsTypes.PERIOD;
            } 
            // fall through
          case 70: break;
          case 6: 
            { return ControlsTypes.A;
            } 
            // fall through
          case 71: break;
          case 7: 
            { return ControlsTypes.COMMA;
            } 
            // fall through
          case 72: break;
          case 8: 
            { return ControlsTypes.COLON;
            } 
            // fall through
          case 73: break;
          case 9: 
            { return ControlsTypes.PERCENT_SIGN;
            } 
            // fall through
          case 74: break;
          case 10: 
            { return ControlsTypes.WHITESPACE_RANGE;
            } 
            // fall through
          case 75: break;
          case 11: 
            { return ControlsTypes.NUMERIC_VALUE;
            } 
            // fall through
          case 76: break;
          case 12: 
            { return ControlsTypes.OR;
            } 
            // fall through
          case 77: break;
          case 13: 
            { return ControlsTypes.OF;
            } 
            // fall through
          case 78: break;
          case 14: 
            { return ControlsTypes.TO;
            } 
            // fall through
          case 79: break;
          case 15: 
            { return ControlsTypes.AN;
            } 
            // fall through
          case 80: break;
          case 16: 
            { return ControlsTypes.IS;
            } 
            // fall through
          case 81: break;
          case 17: 
            { return ControlsTypes.IT;
            } 
            // fall through
          case 82: break;
          case 18: 
            { return ControlsTypes.IF;
            } 
            // fall through
          case 83: break;
          case 19: 
            { return ControlsTypes.SET;
            } 
            // fall through
          case 84: break;
          case 20: 
            { return ControlsTypes.THE;
            } 
            // fall through
          case 85: break;
          case 21: 
            { return ControlsTypes.ARE;
            } 
            // fall through
          case 86: break;
          case 22: 
            { return ControlsTypes.AND;
            } 
            // fall through
          case 87: break;
          case 23: 
            { return ControlsTypes.LOW;
            } 
            // fall through
          case 88: break;
          case 24: 
            { return ControlsTypes.SEMICOLON;
            } 
            // fall through
          case 89: break;
          case 25: 
            { return ControlsTypes.BUT;
            } 
            // fall through
          case 90: break;
          case 26: 
            { return ControlsTypes.DOES;
            } 
            // fall through
          case 91: break;
          case 27: 
            { return ControlsTypes.ELSE;
            } 
            // fall through
          case 92: break;
          case 28: 
            { return ControlsTypes.SETS;
            } 
            // fall through
          case 93: break;
          case 29: 
            { return ControlsTypes.THEN;
            } 
            // fall through
          case 94: break;
          case 30: 
            { return ControlsTypes.THAT;
            } 
            // fall through
          case 95: break;
          case 31: 
            { return ControlsTypes.WITH;
            } 
            // fall through
          case 96: break;
          case 32: 
            { return ControlsTypes.WHEN;
            } 
            // fall through
          case 97: break;
          case 33: 
            { return ControlsTypes.HATE;
            } 
            // fall through
          case 98: break;
          case 34: 
            { return ControlsTypes.HIGH;
            } 
            // fall through
          case 99: break;
          case 35: 
            { return ControlsTypes.TRULY;
            } 
            // fall through
          case 100: break;
          case 36: 
            { return ControlsTypes.NAMED;
            } 
            // fall through
          case 101: break;
          case 37: 
            { return ControlsTypes.MIGHT;
            } 
            // fall through
          case 102: break;
          case 38: 
            { return ControlsTypes.HATES;
            } 
            // fall through
          case 103: break;
          case 39: 
            { return ControlsTypes.LOWER;
            } 
            // fall through
          case 104: break;
          case 40: 
            { return ControlsTypes.REALLY;
            } 
            // fall through
          case 105: break;
          case 41: 
            { return ControlsTypes.NORMAL;
            } 
            // fall through
          case 106: break;
          case 42: 
            { return ControlsTypes.MIMICS;
            } 
            // fall through
          case 107: break;
          case 43: 
            { return ControlsTypes.WITHIN;
            } 
            // fall through
          case 108: break;
          case 44: 
            { return ControlsTypes.IF_NOT;
            } 
            // fall through
          case 109: break;
          case 45: 
            { return ControlsTypes.HIGHER;
            } 
            // fall through
          case 110: break;
          case 46: 
            { return ControlsTypes.LOWEST;
            } 
            // fall through
          case 111: break;
          case 47: 
            { return ControlsTypes.ROUGHLY;
            } 
            // fall through
          case 112: break;
          case 48: 
            { return ControlsTypes.I_THINK;
            } 
            // fall through
          case 113: break;
          case 49: 
            { return ControlsTypes.HIGHEST;
            } 
            // fall through
          case 114: break;
          case 50: 
            { return ControlsTypes.CONTROL;
            } 
            // fall through
          case 115: break;
          case 51: 
            { return ControlsTypes.EQUAL_TO;
            } 
            // fall through
          case 116: break;
          case 52: 
            { return ControlsTypes.ACTUALLY;
            } 
            // fall through
          case 117: break;
          case 53: 
            { return ControlsTypes.WHEN_NOT;
            } 
            // fall through
          case 118: break;
          case 54: 
            { return ControlsTypes.PRIORITY;
            } 
            // fall through
          case 119: break;
          case 55: 
            { return ControlsTypes.CONTROLS;
            } 
            // fall through
          case 120: break;
          case 56: 
            { return ControlsTypes.OTHERWISE;
            } 
            // fall through
          case 121: break;
          case 57: 
            { return ControlsTypes.MORE_THAN;
            } 
            // fall through
          case 122: break;
          case 58: 
            { return ControlsTypes.I_PROMISE;
            } 
            // fall through
          case 123: break;
          case 59: 
            { return ControlsTypes.LESS_THAN;
            } 
            // fall through
          case 124: break;
          case 60: 
            { return ControlsTypes.FIRST_OFF;
            } 
            // fall through
          case 125: break;
          case 61: 
            { return ControlsTypes.A_SCALE_OF;
            } 
            // fall through
          case 126: break;
          case 62: 
            { return ControlsTypes.THE_SAME_AS;
            } 
            // fall through
          case 127: break;
          case 63: 
            { return ControlsTypes.CALCULATION;
            } 
            // fall through
          case 128: break;
          case 64: 
            { return ControlsTypes.A_DEFAULT_OF;
            } 
            // fall through
          case 129: break;
          case 65: 
            { return ControlsTypes.HERES_WHAT_WILL_HAPPEN;
            } 
            // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
